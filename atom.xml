<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jordan&#39;s Notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jordanhuang.tw/"/>
  <updated>2023-02-11T07:32:17.102Z</updated>
  <id>http://jordanhuang.tw/</id>
  
  <author>
    <name>Jordan Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tailscale, 基於 WireGuard 的便利 VPN</title>
    <link href="http://jordanhuang.tw/2022/12/14/tailscale-%E5%9F%BA%E6%96%BCWireGuard%E7%9A%84%E4%BE%BF%E5%88%A9VPN/"/>
    <id>http://jordanhuang.tw/2022/12/14/tailscale-基於WireGuard的便利VPN/</id>
    <published>2022-12-14T12:37:00.000Z</published>
    <updated>2023-02-11T07:32:17.102Z</updated>
    
    <content type="html"><![CDATA[<p>終於終結需要開 linode, 設定 router port-forwarding, 學習 reverse ssh tunnel 與猶豫要不要付費買 ngork 的日子 XDD<br><a id="more"></a></p><h2 id="Tailscale-是什麼"><a href="#Tailscale-是什麼" class="headerlink" title="Tailscale 是什麼"></a>Tailscale 是什麼</h2><p>能將你所有的裝置加入同一個網段，彼此可以互相連通。</p><p>在過去讓裝置可在網際網路上被存取，會需要有台 public 的跳板機或是 router, 並透過 port-forwarding 或是 reverse ssh tunnel 的方式才可讓機器互相連通。而且每個 port 都需要設定，挺麻煩的。<br><img src="tailscale-view.png" alt="overview"></p><h2 id="使用步驟"><a href="#使用步驟" class="headerlink" title="使用步驟"></a>使用步驟</h2><p>首先在 <a href="https://tailscale.com" target="_blank" rel="noopener">官網</a> 上註冊帳號</p><p>在 *nix 系統上可夠過指令快速安裝: <code>curl -fsSL [https://tailscale.com/install.sh](https://tailscale.com/install.sh) | sh</code><br>安裝好後下 <code>tailscale up</code> 啟動 tailscale daemon<br>接著就可以取得 <code>tailscale ip -4</code> 取得 tailscale 分配給你的內網 ip<br>若有用 群暉(Synology) NAS 的朋友，在 Package Center 上也有對應的套件可以安裝<br><img src="synology-package.png" alt="synology-pacakge"></p><p>安裝好後點開，就會跳出 authentication 視窗，透過 OAuth 即可完成認證。<br><img src="auth.png" alt="auth"></p><h2 id="適用情境"><a href="#適用情境" class="headerlink" title="適用情境"></a>適用情境</h2><h3 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h3><p>最近有個專案需要在 Proxmox VE 上的 VM 啟動多達 20 幾台的 docker container, 過程中需要一直查看 container logs。為求方便，我使用 Portainer  來取代繁雜的 docker 指令。</p><p>若沒有 tailscale 會需要對 portainer server 在 router 上做 port-forwarding, 而我所要監測的 VM 上也需要做一次才可使用 portainer agent。現在我只要開啟 tailscale 就可連接，極度方便。<br><img src="tailscale-toggle.png" alt="toggle"><br><img src="portainer.png" alt="portainer"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;終於終結需要開 linode, 設定 router port-forwarding, 學習 reverse ssh tunnel 與猶豫要不要付費買 ngork 的日子 XDD&lt;br&gt;
    
    </summary>
    
    
      <category term="cloud" scheme="http://jordanhuang.tw/tags/cloud/"/>
    
      <category term="Tailscale" scheme="http://jordanhuang.tw/tags/Tailscale/"/>
    
      <category term="networking" scheme="http://jordanhuang.tw/tags/networking/"/>
    
      <category term="vpn" scheme="http://jordanhuang.tw/tags/vpn/"/>
    
      <category term="wireguard" scheme="http://jordanhuang.tw/tags/wireguard/"/>
    
  </entry>
  
  <entry>
    <title>Minio 備份筆記</title>
    <link href="http://jordanhuang.tw/2021/08/17/minio-backup/"/>
    <id>http://jordanhuang.tw/2021/08/17/minio-backup/</id>
    <published>2021-08-17T12:37:00.000Z</published>
    <updated>2022-08-08T13:49:48.948Z</updated>
    
    <content type="html"><![CDATA[<p>公司有產品有大量的影片檔案需要儲存，公司採用的 soluction 是和 AWS S3 compatible 的 的 <a href="https://github.com/minio/minio" target="_blank" rel="noopener">Minio</a>。Minio 是 Object-stoarge 的軟體，是基於底層 file storage 的封裝，可以把跟 object 相關的 metadata 都封裝在一起，讓物件更自我解釋。</p><p>這次接到的任務是對一個由 4 個 node 所組成的 Minio cluster 進行資料備份。</p><a id="more"></a><h3 id="Minio-Cluster-架構"><a href="#Minio-Cluster-架構" class="headerlink" title="Minio Cluster 架構"></a>Minio Cluster 架構</h3><p>我們在 4 台 NAS 上各用 docker 跑了一個 Minio, 行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司有產品有大量的影片檔案需要儲存，公司採用的 soluction 是和 AWS S3 compatible 的 的 &lt;a href=&quot;https://github.com/minio/minio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Minio&lt;/a&gt;。Minio 是 Object-stoarge 的軟體，是基於底層 file storage 的封裝，可以把跟 object 相關的 metadata 都封裝在一起，讓物件更自我解釋。&lt;/p&gt;
&lt;p&gt;這次接到的任務是對一個由 4 個 node 所組成的 Minio cluster 進行資料備份。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Minio" scheme="http://jordanhuang.tw/tags/Minio/"/>
    
      <category term="S3" scheme="http://jordanhuang.tw/tags/S3/"/>
    
      <category term="object-storage" scheme="http://jordanhuang.tw/tags/object-storage/"/>
    
      <category term="cloud" scheme="http://jordanhuang.tw/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>ANKI 系列：快速找出 ANKI NOTE 中圖檔在檔案系統的位置</title>
    <link href="http://jordanhuang.tw/2020/09/23/20200923-%E6%89%BE%E5%88%B0ANKI%E4%B8%8A%E5%9C%96%E6%AA%94%E5%9C%A8%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1%E7%9A%84%E4%BD%8D%E7%BD%AE/"/>
    <id>http://jordanhuang.tw/2020/09/23/20200923-找到ANKI上圖檔在檔案系統的位置/</id>
    <published>2020-09-23T15:56:00.000Z</published>
    <updated>2023-02-11T07:32:17.101Z</updated>
    
    <content type="html"><![CDATA[<p>Anki 是我日常使用最多的效率工具，平均每天會花上一個小時製作卡片和三十分鐘左右的時間複習。<br>在整個過程中我發現圖像對我來說是最有效率的記憶工具，我總是利用圖像或是 gif 去記憶某些重要概念。</p><p>慢慢地，Anki 也變成我重要的資料庫，讓我在做投影片或是連結知識時去提取素材。然而，anki<br>在複製圖片並不直覺，你無法在瀏覽卡片時直接複製圖片，我想到的解決方案是直接找出圖檔在檔案系統中的位置。</p><a id="more"></a><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol><li><p>找出檔名，點選 Edit html,會顯示附件檔名<br><img src="https://i.imgur.com/Lg8bg7n.gif" alt=""></p></li><li><p>找到資源庫資料節，以 macOS 來說會在 <code>~/Library/Application Support/Anki2/User 1/collection.media</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Anki 是我日常使用最多的效率工具，平均每天會花上一個小時製作卡片和三十分鐘左右的時間複習。&lt;br&gt;在整個過程中我發現圖像對我來說是最有效率的記憶工具，我總是利用圖像或是 gif 去記憶某些重要概念。&lt;/p&gt;
&lt;p&gt;慢慢地，Anki 也變成我重要的資料庫，讓我在做投影片或是連結知識時去提取素材。然而，anki&lt;br&gt;在複製圖片並不直覺，你無法在瀏覽卡片時直接複製圖片，我想到的解決方案是直接找出圖檔在檔案系統中的位置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Anki" scheme="http://jordanhuang.tw/tags/Anki/"/>
    
      <category term="fileSystem" scheme="http://jordanhuang.tw/tags/fileSystem/"/>
    
  </entry>
  
  <entry>
    <title>讀書書摘：神父也得憂鬱症</title>
    <link href="http://jordanhuang.tw/2020/09/21/%E6%9B%B8%E6%91%98-%E7%A5%9E%E7%88%B6%E4%B9%9F%E5%BE%97%E6%86%82%E9%AC%B1%E7%97%87/"/>
    <id>http://jordanhuang.tw/2020/09/21/書摘-神父也得憂鬱症/</id>
    <published>2020-09-21T13:03:27.000Z</published>
    <updated>2023-02-11T07:32:17.112Z</updated>
    
    <content type="html"><![CDATA[<p>在研究所期間，我得知了媽媽罹患了乳癌，與此同時研究所的強度遠超乎我的想像。我常常一個人獨自在清大校園漫步，失魂落魄或許是那時對我最好的形容了。我覺得自己好像病了，像往常一樣找了些書來療癒自己，這本書讓我覺得我不孤單，我也不是不夠抗壓，希望所有曾經低潮的人都人再次感受到快樂。</p><a id="more"></a><h2 id="書摘"><a href="#書摘" class="headerlink" title="書摘"></a>書摘</h2><ul><li>「我稱其為神枯……如..靈魂的黑暗、內心的騷擾、對卑污世物的趨向，各種煽動和誘惑惹起的不寧，引人失去信心、沒有希望、沒有愛，覺得整個靈魂慵懶、冷漠、愁苦，像是離棄了她的造物主一般。」</li><li>「真正奇妙的是，我一再看到人們如何把不幸事件–例如生下唐氏症寶寶或十歲時失明轉化為自我犧牲和勇氣的偉大行為。這個事件本來可以把人給毀掉，卻使人成為一位活聖人。」</li><li>我的怒氣逐漸醞釀成狂怒，卻無處發洩。它在我心靈隱密處翻攪，越鑽越深。在那些黑暗的角落，我的狂怒又漸漸轉變為具破壞性的毒素。</li><li>然而我卻拒絕幫助。我痛責自己，因為我竟然企圖做自己的治療師和自己的救主。我想起一句古諺：「自己治療自己的人，有了個愚蠢的病人」。</li><li>「我覺得我好像被從新塑造。好多次我都想放棄，乾脆一了百了，但某些力量讓我撐下去。我全新相信，在內心深處，天主輕柔的聲音鼓勵了我，告訴我，祂會為我想辦法解決。」</li><li>在這個時刻，我與我所服務的最窮困的人一樣有需要。我最基本的需要就是把時間與力氣用在我個人的治癒上。這表示我要讓別人來幫助我，我如我在那麼多人有需要時，幫助了他們一樣。現在我必須讓自己接受別人的幫忙。這絕不是軟弱的表現。我不可能單靠自己就得痊癒，我不可能在獨處中或某種隔離狀態中找到我所尋求的完整。天主創造人本來就是群居性的。當我幫助他人，也讓他們幫助我癒合創傷時，才是我的最佳狀態。孤獨一人對我沒有好處，尤其是在我痛苦時。</li><li>我應該容許自己在失去……及人生中其他的重大失落好好傷心一番，而無須羞愧。</li><li>由於心靈十分相信我對自己說的話，因此我必須格外注意對自己的談話。</li><li>別再為了實際或想像中的失敗而責備自己。這並沒有關係。天主就愛我現在這個樣子，也接納這樣的我。我必須學習愛自己、接納自己，包括我所有的缺點與軟弱。</li><li>我知所以「是」，遠甚於我知所以為。我的價值不只在於我做的事，不論那些事情如何重要；我的價值也在於我是天主的子女，天主造我，給我與生俱來的重要性與價值。</li><li>生活中只有工作，這樣的單軌人生，頂多是個沒有生氣的人生。我必須努力發展一個更正常、更健康的生活方式，去體會各種經驗，而不是只有工作。</li><li>大家都是再做選擇中成長並趨近於成熟。</li><li>我需要更多的友誼並減少獨處。我需要那種與他人相連的感覺。我需要親密感–廣義的親密感，亦即與他人親近的感覺。我應下功夫培養和擴展友誼，以減少生命中孤獨感的衝擊。</li><li>憂鬱症是一種情緒失調，提醒我們注意生命中混亂的區域。有志會的人會留意這訊息，並利用它來改變那些需要關注的地帶。我的憂鬱症給了我些強烈的訊息—我所不願意聆聽的訊息。憂鬱症讓我不再忽略這個事實：我的生命已不在我的掌控中。壓力正重擊著我，悲傷淹沒了我，我許多最深切的需要都受到忽略。憂鬱症使我不再能躲避自己，不得不承認現狀。雖然這疾病可能會毀了我，但它實際上成為一項恩賜。它強迫我誠實面對自己的生命，並做出有益於自己幸福的決定。若不是患了憂鬱症，我可能做不到這些。</li><li>面對、接受、漂浮，及給自己一點時間。</li></ul><h2 id="重鬱症的診斷準則"><a href="#重鬱症的診斷準則" class="headerlink" title="重鬱症的診斷準則"></a>重鬱症的診斷準則</h2><ol><li>悲傷空虛、沒有希望、無助、焦慮等感受</li><li>睡眠障礙，幾乎每天失眠或說得太多</li><li>對日常生活失去興趣或性慾減退</li><li>注意力不易集中、腦袋一片空白，想不起事情，猶豫不決。</li><li>過度哭泣</li><li>失去活力，有倦怠感</li><li>長期的疼痛，但找不出身體上的原因，治療也無效</li><li>煩躁易怒</li><li>退縮不與人交往、孤立</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在研究所期間，我得知了媽媽罹患了乳癌，與此同時研究所的強度遠超乎我的想像。我常常一個人獨自在清大校園漫步，失魂落魄或許是那時對我最好的形容了。我覺得自己好像病了，像往常一樣找了些書來療癒自己，這本書讓我覺得我不孤單，我也不是不夠抗壓，希望所有曾經低潮的人都人再次感受到快樂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Note" scheme="http://jordanhuang.tw/tags/Note/"/>
    
      <category term="書摘" scheme="http://jordanhuang.tw/tags/%E6%9B%B8%E6%91%98/"/>
    
      <category term="心得" scheme="http://jordanhuang.tw/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>讀書心得：與成功有約</title>
    <link href="http://jordanhuang.tw/2020/09/21/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97-%E7%AA%AE%E7%88%B8%E7%88%B8%E8%88%87%E5%AF%8C%E7%88%B8%E7%88%B8/"/>
    <id>http://jordanhuang.tw/2020/09/21/讀書心得-窮爸爸與富爸爸/</id>
    <published>2020-09-21T08:08:00.000Z</published>
    <updated>2023-02-11T07:32:17.112Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.facebook.com/qiyejiashangdao/videos/167327030583227/" target="_blank" rel="noopener">《穷爸爸，富爸爸》影片</a></li></ul><ol><li>對待金錢: 窮爸爸覺得，貪婪是萬惡之源，而富爸爸卻覺得，貧窮會放大人向惡的那一面，才是真正的萬惡之源。</li><li>對待昂貴的物品：窮:我買不起，不再思考所有的可能。富：我要怎麼樣才能買到，開始構思可能的行動方案。</li><li>對待納稅:</li><li>對待學習：窮：你要好好唸書，才能找到好工作。驅動學習的力量是<code>恐懼</code>。富：你要好好唸書，以後就能開自己的公司，創造更多就業機會，幫助更多了。驅動學習的力量是<code>愛</code>(?真的嘛？為何我總覺得有點虛假，和打高風）</li><li>對待養老：窮：期待政府養他。富：對自己的財務負全責，認為如果有了依靠人就會變得軟弱。</li><li>對待破產：</li><li>富人是不會為錢工作的：而是把時間和精力澆灌在自己的事業上<ul><li>如何擺脫老鼠在籠子中原地打轉的陷阱呢？要<code>面對自己的恐懼和欲望</code>(why?)</li><li>做到心裡不害怕，不為小錢所動（有點像以終為始的概念)</li></ul></li><li><code>學會區分資產和負債</code>：理財的重點，不斷地買入資產，而非負債（例如車子等會讓你有更多開銷的商品）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.facebook.com/qiyejiashangdao/videos/167327030583227/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《穷爸爸，富爸爸》影片&lt;/a&gt;&lt;/li&gt;
&lt;/ul
      
    
    </summary>
    
    
      <category term="Note" scheme="http://jordanhuang.tw/tags/Note/"/>
    
      <category term="書摘" scheme="http://jordanhuang.tw/tags/%E6%9B%B8%E6%91%98/"/>
    
      <category term="心得" scheme="http://jordanhuang.tw/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>讀書心得：與成功有約</title>
    <link href="http://jordanhuang.tw/2020/09/21/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97-%E8%88%87%E6%88%90%E5%8A%9F%E6%9C%89%E7%B4%84/"/>
    <id>http://jordanhuang.tw/2020/09/21/讀書心得-與成功有約/</id>
    <published>2020-09-21T08:08:00.000Z</published>
    <updated>2023-02-11T07:32:17.112Z</updated>
    
    <content type="html"><![CDATA[<p>這本書是研究所指導教授蔡仁松老師要求所有研究生必讀的書。<br>從我我獲益良多，對人生的規劃有了很具體的想法。推薦給大家。</p><a id="more"></a><h2 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h2><ul><li>什麼是成功 -&gt; <code>全面的成功</code>才是真正的成功</li><li>勿為<code>單一的</code>成功目標，失去了平衡：不要拼命往上爬，到頂了，才發現梯子放錯了牆。</li></ul><blockquote><p>真正卓越的人生，少不了正直的生活 –by Jordan</p></blockquote><ul><li>擁有財富，並不代表經濟獨立，<code>擁有創造財富的能力</code>，才真正的可靠。</li></ul><h3 id="成長的三個層次"><a href="#成長的三個層次" class="headerlink" title="成長的三個層次"></a>成長的三個層次</h3><ul><li>依賴<br>圍繞著<code>你</code>的概念—你照顧我;你為我的成敗負責;若事情有差錯,我就怪你</li><li>獨立<br>著眼於<code>我</code>的觀點—我可以自立;我為自己負責;我可以<code>自由選擇</code>。</li><li>互賴<br>從<code>我們</code>出發—我們自主、合作、集思廣益，共同開創偉大的前程。</li></ul><p><img src="" alt=""></p><h3 id="以終為始"><a href="#以終為始" class="headerlink" title="以終為始"></a>以終為始</h3><ul><li>所有事物都是經過<code>兩次創造</code>，先是在腦海裡，其次才是實質的創造。</li><li>個人、家庭、團隊和組織在做任何計畫時，均先擬出願景和目標，並據此塑造未來，全新投注於自己最重視的原則價值觀、關係及目標之上。</li><li>對個人、家庭、團隊而言，<code>使命宣言</code>可說是願景的最高形式，他是主要的決策，主宰了所有其他決定。</li><li>領導工作的核心，就是在共有的使命、願景和價值觀之後，創造出一個文化。</li><li>使命宣言是個人的根本大法、基本人生觀，也是衡量一切利弊得失的基準。</li><li>撰寫使命宣言的過程，重要性不亞於最後的結論。<br>ex:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 我究竟是怎麼樣的人？  </span><br><span class="line">* 我最強的才能及天賦是什麼？  </span><br><span class="line">* 當....時，我感到真正的快樂？  </span><br><span class="line">* 我想成為怎麼樣的人？  </span><br><span class="line">* 有哪些品格是我想擁有的？  </span><br><span class="line">* 有哪些東西是我覺得重要並想擁有的？</span><br></pre></td></tr></table></figure><h3 id="我的使命宣言"><a href="#我的使命宣言" class="headerlink" title="我的使命宣言"></a>我的使命宣言</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">對自己重要的事情:  </span><br><span class="line">1. 運動的快樂，成就感 </span><br><span class="line">2. 良好的家情氣氛，與女友保持良好的聯絡與話題，分享彼此生活</span><br><span class="line">3. 新環境和新事物所產生的想法刺激(Ex:旅遊，品嚐美食美景)</span><br><span class="line"></span><br><span class="line">希望自己能彰顯的價值：  </span><br><span class="line">1. 誠懇，值得信任</span><br><span class="line">2. 充滿智慧</span><br><span class="line">3. 沈穩且充滿安定的力量</span><br><span class="line">4. 積極</span><br><span class="line">富有創意，勇於承擔，開朗正面 </span><br><span class="line">充滿活力，樂愛運動反應速度快</span><br></pre></td></tr></table></figure><h3 id="心靈實驗"><a href="#心靈實驗" class="headerlink" title="心靈實驗"></a>心靈實驗</h3><ul><li>父親 - 課業的事情不用我們擔心，</li><li>弟弟 - 負責任的哥哥，能幫助我解答人生上面的疑惑，並作為行為處事的榜樣，幽默風趣能在餐桌上凝聚家人間的情感。</li><li>表妹 - 懂得計畫與實踐計畫，善於處理電腦上的問題。</li><li>表弟 - 他善於分享他的人生經驗，為我未來的計畫做建議。</li><li>女友 - 他是個善良誠懇的人，能夠有耐心的與我溝通，性格沈穩，不會因為小事情而對我生氣，善於思考與分析問題，提出可行的具體方案並溫柔的說服我，同時也懂得幽默，讓我的生活長保愉快與活力。</li><li></li><li>好友 - 他樂於分享所見所聞，對事情能夠獨立思考並歸納出有趣的觀點，從不怨天尤人。</li><li>同事 - 他善於利用工具與時間，能夠有效率的完成工作，樂於分享其技能與經驗。</li></ul><h2 id="書摘"><a href="#書摘" class="headerlink" title="書摘"></a>書摘</h2><ul><li>p.143 為自己立憲法<br>確立人生願景最有效的方法，就是認定自己的人生哲學或基本信念，然後寫一份人生使命宣言。<br>宣言中應包括自我期許與基本價值觀，至於內容往往因人而異。</li></ul><p>p.146<br>安全感代表價值觀，認同，自尊自重與歸屬感。<br>「人生方向」是生命追求方向以及決斷所依據的原則。「智慧」是對事物的認知、理解與判斷能力。<br>「力量」則是採取行動、達成目標的能耐。</p><p>在所有進步的社會中，愛都是代表動作，但消極的人卻把愛當成一種感覺。好萊塢式的電影就常灌輸這種不必為愛負責的觀念<br>– 因為愛只是感覺，沒有感覺，便沒有愛。 事實上，任由感覺左右行為是不負責任的作法。<br>人生角色</p><p>家庭</p><ul><li>性質:</li><li>貢獻: 提共更開闊的觀點，幽默風趣使家庭氣氛和樂</li></ul><p>情緒上的成熟 - 有勇氣表達自己的感情與信念，又能顧及他人的感受與想法。</p><p>p.265<br>人人都希望被了解，也亟於表達自己,卻疏於傾聽。一般人聆聽的目的是為了做出最貼切的反應，根本不是想了解對方。因為我們常以為<br>天下人都跟自己一樣，以為以己之心可以度他人之腹。</p><p>至於同理新的傾聽，出發點是為了 <code>了解而非回應</code>，也就是透過言談明瞭一個人的觀念、感受與內在的世界。<br>同理心與同情心有些差別，同情摻雜價值判斷與認同(用你自己的價值觀去判斷是需要憐憫或認同)。<br>同理心也不代表贊同，而是指深入了解對方的感情與理智的世界。</p><p>p.267<br>由衷的傾聽可以提供「心理的空氣」。一種精神上被肯定、理解、賞識… 當你能帶著同理心傾聽他人說話，變可以提共對方心理的空氣，滿足<br>對方精神上的需求，這時你才能及中心力解決問題或發揮影響力。</p><p>先尋求相互理解，找出問題，在想辦法解決，這種方式並不容易；畢竟立刻拿給對方一副你多年來都合用的眼鏡，是最簡便的方式。<br>當然，為人設想必須承擔相當大的風險。敞開自我不設防，<code>的確容易受到傷害</code>、易受影響。這是無可奈何的兩難。<code>要想影響別人，就得受人影響</code>。<br>正因如此，第一到第三個習慣的實踐功夫更為重要，<code>修養要能到家才能把持住自己，享有內心的平靜與抵禦外在的力量</code>。</p><p>p.278<br>對於親密關係的人，和他分享經驗將大有助於溝通：「讀了本書之後才發現，其實我從未真正聆聽你說話，但今後願盡力而為，縱使一時間不能做好，但我確實真心想了解你，也希望你助我一臂之力。」</p><p>人人都可望知音，所以這方面的投資絕對值得，它能你掌握真正的癥結，大大增加情感存摺的數字。</p><p>p.293<br>但利連撒爾<code>花了好幾星期打造情感帳戶</code>。他讓所有人互相了解，<code>清楚各自喜好、願景、目標、關注的事情、家庭背景、思維典範等</code>。<br>他在所有人之間塑造良好的互動，打造了緊實的連結，但也因此遭到嚴厲的抨擊，外界認為此舉「毫無效益」。</p><p>但結果是，整個小組的凝聚力大為提高，對彼此開誠布公，機盪出很有創意與統合綜效。成員相互尊重，即便是出現歧異，也願意真誠理解彼此。<br>他們的態度是，<code>「如果對方的才智能力，對團團隊的忠誠都不下於我，我們之間若出現意見不合，那必定是有些我不了解而且必須去了解的事物， 我應該從對方的觀點與架構來思考。」</code></p><p>p.297<br>至於缺少安全感的人往往堅持己見，一意孤行，處處要別人順從與附和。他們不了解，<code>人際關係最可貴的是接觸不同的觀點</code>。一致並不代表不團結，相同<br>也不意味齊心；團結才能互補，合作需要尊重差異。</p><p>尊重差異<br>自以為是的人以為自己最客觀，別人都失之偏挾，其實這才是劃地自限。<br>假如兩人意見相同，其中一人必屬多餘。與所見略同的人溝通，毫無益處，要有歧見才有收穫。</p><p>p.342<br>經由努力不懈，一切都能變得迎刃而解，這並不是事件發生轉變，而是因為我們的能力增強了。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="http://murphymind.blogspot.tw/2005/02/7-habits-of-highly-effective-people_05.html" target="_blank" rel="noopener">Murphy的書房</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這本書是研究所指導教授蔡仁松老師要求所有研究生必讀的書。&lt;br&gt;從我我獲益良多，對人生的規劃有了很具體的想法。推薦給大家。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Note" scheme="http://jordanhuang.tw/tags/Note/"/>
    
      <category term="書摘" scheme="http://jordanhuang.tw/tags/%E6%9B%B8%E6%91%98/"/>
    
      <category term="心得" scheme="http://jordanhuang.tw/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>利用 MusicBrainz Database 學習 postgres</title>
    <link href="http://jordanhuang.tw/2020/03/29/%E5%88%A9%E7%94%A8-MusicBrainz-Database-%E5%AD%B8%E7%BF%92-postgresql/"/>
    <id>http://jordanhuang.tw/2020/03/29/利用-MusicBrainz-Database-學習-postgresql/</id>
    <published>2020-03-29T04:32:00.000Z</published>
    <updated>2023-02-11T07:32:17.111Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/9/91/MusicBrainz_Logo_2016.svg" alt=""></p><p>由於最近專案上大量使用 sql, 加上前陣子做了 <a href="https://www.slideshare.net/ssuserb41761/postgres-indexing-and-toward-big-data-application" target="_blank" rel="noopener">postgres 內部 index</a> 的研究，想更近一步優化 sql 的寫法，因此找了 musicvbrainz database 這 來練習，這裡紀錄一下整個安裝和設定的過程。</p><p>MusicBrainz是一個旨在創造開放資料音樂資料庫的專案，它原初的目的是針對光碟資料庫中的限制，但如今已不再將目標局限於CD後設資料儲存庫，而擴大為一種結構化的「音樂維基百科」。</p><a id="more"></a><p>我在 <a href="https://aws.amazon.com/tw/lightsail/" target="_blank" rel="noopener">aws lightsail</a> 上開了一台 VPS, 從乾淨的環境開始裝設 postgres</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br><span class="line">sudo sh -c <span class="string">'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" &gt;&gt; /etc/apt/sources.list.d/pgdg.list'</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install postgresql postgresql-contrib</span><br></pre></td></tr></table></figure><p>接著利用 mbdata 來創建 db 並導入 sql dump files.</p><h2 id="遇到的問題"><a href="#遇到的問題" class="headerlink" title="遇到的問題"></a>遇到的問題</h2><h3 id="無法-remote-access-postgres-from-psql"><a href="#無法-remote-access-postgres-from-psql" class="headerlink" title="無法 remote access postgres from psql"></a>無法 remote access postgres from psql</h3><p>解決辦法: lightsail enable 5432 port</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/9/91/MusicBrainz_Logo_2016.svg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由於最近專案上大量使用 sql, 加上前陣子做了 &lt;a href=&quot;https://www.slideshare.net/ssuserb41761/postgres-indexing-and-toward-big-data-application&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;postgres 內部 index&lt;/a&gt; 的研究，想更近一步優化 sql 的寫法，因此找了 musicvbrainz database 這 來練習，這裡紀錄一下整個安裝和設定的過程。&lt;/p&gt;
&lt;p&gt;MusicBrainz是一個旨在創造開放資料音樂資料庫的專案，它原初的目的是針對光碟資料庫中的限制，但如今已不再將目標局限於CD後設資料儲存庫，而擴大為一種結構化的「音樂維基百科」。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://jordanhuang.tw/tags/python/"/>
    
      <category term="postgres" scheme="http://jordanhuang.tw/tags/postgres/"/>
    
      <category term="aws" scheme="http://jordanhuang.tw/tags/aws/"/>
    
      <category term="lightsail" scheme="http://jordanhuang.tw/tags/lightsail/"/>
    
  </entry>
  
  <entry>
    <title>使用 pandas 處理非結構話資料</title>
    <link href="http://jordanhuang.tw/2019/12/03/%E4%BD%BF%E7%94%A8pandas%E8%99%95%E7%90%86%E9%9D%9E%E7%B5%90%E6%A7%8B%E5%8C%96%E8%B3%87%E6%96%99/"/>
    <id>http://jordanhuang.tw/2019/12/03/使用pandas處理非結構化資料/</id>
    <published>2019-12-03T07:50:42.000Z</published>
    <updated>2023-02-11T07:32:17.111Z</updated>
    
    <content type="html"><![CDATA[<p>TO be finished.<br><a id="more"></a></p><h1 id="Universal-functions-ufunc"><a href="#Universal-functions-ufunc" class="headerlink" title="Universal functions (ufunc)"></a>Universal functions (ufunc)</h1><p>pandas 底層以 numpy 的 ndarray 去表現 columns values 的集合，而 numpy 提供了一系列的 universal<br>function 可以加速 ndarray 的運算速度。</p><p><a href="https://docs.scipy.org/doc/numpy/reference/ufuncs.html" target="_blank" rel="noopener">https://docs.scipy.org/doc/numpy/reference/ufuncs.html</a></p><h2 id="Vectorization"><a href="#Vectorization" class="headerlink" title="Vectorization"></a>Vectorization</h2><p>透過特殊硬體，讓原本需要多個 iteration 才能完成的運算並行處理，compiler<br>會知道底層硬體是否支持向量化操作，而自動產生對應的 binary code.</p><p><a href="https://lappweb.in2p3.fr/~paubert/ASTERICS_HPC/images/vectorization.png" target="_blank" rel="noopener">!scalar v.s vectorized</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TO be finished.&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://jordanhuang.tw/tags/python/"/>
    
      <category term="pandas" scheme="http://jordanhuang.tw/tags/pandas/"/>
    
      <category term="data engineer" scheme="http://jordanhuang.tw/tags/data-engineer/"/>
    
  </entry>
  
  <entry>
    <title>Python Pandas 數據分析：以博客來網路書店熱銷商品為例</title>
    <link href="http://jordanhuang.tw/2019/12/03/books-com-tw-analysis/"/>
    <id>http://jordanhuang.tw/2019/12/03/books-com-tw-analysis/</id>
    <published>2019-12-03T07:35:00.000Z</published>
    <updated>2020-09-21T06:30:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>簡單記錄一下這個週末做的小測試，專案連結在此:<a href="https://github.com/good5dog5/books_com_tw_crawler" target="_blank" rel="noopener">books_com_tw_crawler</a></p><a id="more"></a><h1 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h1><p>利用 pyenv 去建立 virtual environment，可依照不同 OS 去安裝。</p><h2 id="安裝-pyenv"><a href="#安裝-pyenv" class="headerlink" title="安裝 pyenv"></a>安裝 pyenv</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu (安裝所需 packages)</span></span><br><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev</span><br><span class="line">libsqlite3-dev wget curl llvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac (直接安裝)</span></span><br><span class="line">curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure><h2 id="設定環境變數"><a href="#設定環境變數" class="headerlink" title="設定環境變數"></a>設定環境變數</h2><p>由於我用 oh-my-zsh, 在 plugins 加入 pyenv 並 source ~/.zhsrc 即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">autojump</span><br><span class="line">docker</span><br><span class="line">fzf</span><br><span class="line">osx</span><br><span class="line">pyenv</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="安裝-設定-global-python-intepreter"><a href="#安裝-設定-global-python-intepreter" class="headerlink" title="安裝/設定 global python intepreter"></a>安裝/設定 global python intepreter</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.6.8</span><br><span class="line">pyenv global 3.6.8</span><br></pre></td></tr></table></figure><h2 id="利用-virtual-environment-安裝-python-packages"><a href="#利用-virtual-environment-安裝-python-packages" class="headerlink" title="利用 virtual environment 安裝 python packages"></a>利用 virtual environment 安裝 python packages</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m venv .venv</span><br><span class="line"><span class="built_in">source</span> .venv/bin/activate</span><br></pre></td></tr></table></figure><p>以上兩步驟會在 <code>當前目錄下</code> 建立一個 .venv 資料夾，之後用 <code>pip</code> 安裝的套件都會放在裡面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip  install -r requirements.txt</span><br></pre></td></tr></table></figure><h1 id="利用-requests-和-lxml-爬取熱銷品資料"><a href="#利用-requests-和-lxml-爬取熱銷品資料" class="headerlink" title="利用 requests 和 lxml 爬取熱銷品資料"></a>利用 requests 和 lxml 爬取熱銷品資料</h1><p>我的目標網頁為博客來書店的 top 100 熱銷書籍資料(<a href="https://www.books.com.tw/web/sys_tdrntb/books/)，簡單測試一下拿到的" target="_blank" rel="noopener">https://www.books.com.tw/web/sys_tdrntb/books/)，簡單測試一下拿到的</a> html 格式。</p><h1 id="取得-html"><a href="#取得-html" class="headerlink" title="取得 html"></a>取得 html</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">resp = requests.get(<span class="string">'https://www.books.com.tw/web/sys_tdrntb/books/'</span>)</span><br><span class="line">print(resp.content)</span><br></pre></td></tr></table></figure><p>會發現拿到的是 byte string, something likes<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e4\xbc\x81\xe6\xa5\xad&lt;/span&gt;&lt;/li&gt;\n&lt;li class=<span class="string">"logo_1"</span>&gt;&lt;span</span><br><span class="line">title=<span class="string">"SSL\xe6\x86\x91\xe8\xad\x89\xe6\x9c\x8d\xe5\x8b\x99"</span>&gt;SSL\xe6\x86\x91\xe8\xad\x89\xe6\x9c\x8d\xe5\x8b\x99&lt;/span&gt;&lt;/li&gt;\n&lt;li</span><br><span class="line">class=<span class="string">"logo_2"</span>&gt;&lt;span</span><br></pre></td></tr></table></figure></p><p>用 str.decode 成 utf-8 即可。</p><h1 id="以-DOM-操作-html-data"><a href="#以-DOM-操作-html-data" class="headerlink" title="以 DOM 操作 html data"></a>以 DOM 操作 html data</h1><p>利用 lxml.html 將 html 轉成 etree 的樹狀結構，方便我們定位和取得各個節點的資料。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lxml.html</span><br><span class="line">root_etree = lxml.html.fromstring(resp.content.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h1 id="取得-top-書單列表"><a href="#取得-top-書單列表" class="headerlink" title="取得 top 書單列表"></a>取得 top 書單列表</h1><p>現在 <code>root_etree</code> 是代表整張網頁的樹狀結構。我們可以用 <a href="https://stackoverflow.com/a/42194160" target="_blank" rel="noopener">chrome dev tool</a> 定位出每本暢銷書 link 的 xpath 並取得 url。以下 code snippet 會回傳一個 list of etree element。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">books_url_list = root_etree.xpath(<span class="string">'/html/body/div[4]/div/div[3]/div[1]/ul/li'</span>)</span><br><span class="line">print(len(books_url_list)) <span class="comment"># 100</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;簡單記錄一下這個週末做的小測試，專案連結在此:&lt;a href=&quot;https://github.com/good5dog5/books_com_tw_crawler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;books_com_tw_crawler&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://jordanhuang.tw/tags/Python/"/>
    
      <category term="lxml" scheme="http://jordanhuang.tw/tags/lxml/"/>
    
      <category term="requests" scheme="http://jordanhuang.tw/tags/requests/"/>
    
      <category term="pandas" scheme="http://jordanhuang.tw/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>解決 apt-get 顯示 public key is not AVALIABLE 的問題</title>
    <link href="http://jordanhuang.tw/2019/07/09/%E8%A7%A3%E6%B1%BAPublic-key-is-not-avaliable/"/>
    <id>http://jordanhuang.tw/2019/07/09/解決Public-key-is-not-avaliable/</id>
    <published>2019-07-09T02:50:42.000Z</published>
    <updated>2023-02-11T07:32:17.112Z</updated>
    
    <content type="html"><![CDATA[<p>用 apt-get update package index 或是安裝套件時，常會發生錯誤訊息為 <code>public key is not AVALIABLE</code><br>的問題，紀錄一下對應的解法。</p><a id="more"></a><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>沒有對應的 public key，以此例而言， public key ID 是 <code>1F3045A5DF7587C3</code></p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>從 key server 下載對應的公鑰即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1F3045A5DF7587C3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 apt-get update package index 或是安裝套件時，常會發生錯誤訊息為 &lt;code&gt;public key is not AVALIABLE&lt;/code&gt;&lt;br&gt;的問題，紀錄一下對應的解法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="apt-get" scheme="http://jordanhuang.tw/tags/apt-get/"/>
    
      <category term="gpg" scheme="http://jordanhuang.tw/tags/gpg/"/>
    
      <category term="debian" scheme="http://jordanhuang.tw/tags/debian/"/>
    
      <category term="ubuntu" scheme="http://jordanhuang.tw/tags/ubuntu/"/>
    
      <category term="apt" scheme="http://jordanhuang.tw/tags/apt/"/>
    
  </entry>
  
  <entry>
    <title>Redis 初探 - 使用 python 操作 redis</title>
    <link href="http://jordanhuang.tw/2018/11/12/First-try-Redis-with-Python/"/>
    <id>http://jordanhuang.tw/2018/11/12/First-try-Redis-with-Python/</id>
    <published>2018-11-12T09:53:00.000Z</published>
    <updated>2023-02-11T07:32:17.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis-是什麼"><a href="#Redis-是什麼" class="headerlink" title="Redis 是什麼?"></a>Redis 是什麼?</h2><p>redis 是 key:value pair’s cache system, 或是說是一套 distributed dictionary server<br>從 StackOverflow 的<a href="https://stackoverflow.com/questions/10558465/memcached-vs-redis" target="_blank" rel="noopener">問題</a> Memcached vs. Redis?  大家一面倒地推 Redis</p><h2 id="安裝-redis-server-redis-py"><a href="#安裝-redis-server-redis-py" class="headerlink" title="安裝 redis server, redis-py"></a>安裝 redis server, redis-py</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br><span class="line">pip install redis</span><br></pre></td></tr></table></figure><h2 id="設定並啟動-redis-server"><a href="#設定並啟動-redis-server" class="headerlink" title="設定並啟動 redis server"></a>設定並啟動 redis server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -sfv /usr/<span class="built_in">local</span>/opt/redis/*.plist ~/Library/LaunchAgents</span><br><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</span><br><span class="line">redis-server /usr/<span class="built_in">local</span>/etc/redis.conf</span><br></pre></td></tr></table></figure><p>測試看看 redis 是否跑起來</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli ping</span><br></pre></td></tr></table></figure><h2 id="minimal-test"><a href="#minimal-test" class="headerlink" title="minimal test"></a>minimal test</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">r = redis.Redis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line">r.set(<span class="string">'foo'</span>,<span class="string">'bar'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">r.get(<span class="string">'foo'</span>)</span><br><span class="line">bar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redis-是什麼&quot;&gt;&lt;a href=&quot;#Redis-是什麼&quot; class=&quot;headerlink&quot; title=&quot;Redis 是什麼?&quot;&gt;&lt;/a&gt;Redis 是什麼?&lt;/h2&gt;&lt;p&gt;redis 是 key:value pair’s cache system, 或
      
    
    </summary>
    
    
      <category term="redis" scheme="http://jordanhuang.tw/tags/redis/"/>
    
      <category term="python" scheme="http://jordanhuang.tw/tags/python/"/>
    
      <category term="memcached" scheme="http://jordanhuang.tw/tags/memcached/"/>
    
  </entry>
  
  <entry>
    <title>KKStream DevOps Engineer  面試經驗</title>
    <link href="http://jordanhuang.tw/2018/08/28/interview-kkstream/"/>
    <id>http://jordanhuang.tw/2018/08/28/interview-kkstream/</id>
    <published>2018-08-28T05:12:00.000Z</published>
    <updated>2020-09-23T17:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 2018 年 5 月左右，我的研究主題在實作方面進入了撞牆期，有長達五個月的時間都沒有實質的進展。那陣子每次要跟教授<br>meeting 前都壓力神大，加上看到身邊的同學一個個都進入知名大公司實習，心裡也慢慢埋下找實習的念頭。</p><p>那時候主要找的職缺是 DevOps，因為有我喜愛的 Linux 又有當時很火紅的雲端運算、AWS<br>和分散式運算等名詞，聽起來就超 cool 的。</p><p>我只投了一家做高頻交易的公司，是在清大就業博覽會上有聽到他們家的 pitch，面試後也拿到<br>offer，殊不知後來 KKStream 主動連絡上我，且開出比高頻交易公司更好的<br>Offer，僅以此篇記錄下整個面試過程給大家參考。</p><a id="more"></a><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>來到 KKBOX 集團位於南港展覽館站的大樓，KKStream 位在 7 (or 8 有點忘了)<br>樓，剛進門就有很正個櫃檯小姐姐帶你到小房間寫考卷，考卷上大概都是一些概念題，題目大概有</p><ul><li>CDN 是什麼</li><li>high availability 是什麼</li><li>VPN 和 Proxy 有什麼不同</li><li>一些常用的 linux 指令</li><li>Linux network debug / performance 指令</li></ul><p>題目對純資工系的學生來說應該還好，只可能有些專有名詞要查一下了解過應該都寫得出來。<br>寫完考卷後就進來一個主管、一個 backend 同事和一個 SRE 同事近來一起面試，習慣 1-on-1<br>面試的我面對這樣的場面真的覺得備感壓力… </p><p>他們主要會對考卷上的答案在做一些詢問，像我 VPN 和 Proxy<br>就沒有達的很好，有再和主管討論一下兩者個差異，之後就是一些情境題，像是如果有一個 API endpoint<br>打不進去了，你要怎麼排除問題？針對這題我會列出一些假設情境，一方面展現自己對系統的了解，一方面也讓問題具體化變得比較好回答。回答完後，面試官會再加上一些限制條件，比如說若這樣的機器有幾百台，那這時候原本的方法該還適用嘛？該如何改善等等。</p><p>整個面試的過程都是類似的情境問題，持續了約 1.5 個小時結束這次面試。</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>大約過了兩三天後收到二面通知，地點在同一區另一棟大樓的 KKBOX<br>辦公室。這次面談的是用人主管和他的主管，主要聊 KKStream<br>主要的技術和方向，跟問一些人格特質方面的問題，技術問題有是大方向的聊聊。印象比較深刻的是，我有問到說<br>DevOps 這個職位的技能樹又深又廣，我該如何規劃我的 Career path<br>呢？用人主管本身是架構師，針對這個問題他說這還是很看個人，每個人的選擇都不一樣，面對的需求也不一樣，他給我的建議是用到什麼就學什麼，能學就盡量學總有一天會用到跟融會貫通的。在經過一個小時左右的聊天結束這次面談。</p><h2 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h2><p>面談後我覺得我很喜歡 KKStream<br>給我的感覺，在面談中能深切感受到公司的技術含量與充滿活力與尊重工程師的文化，每天都在等 HR 的 Offer<br>電話。直到面試後下週的週五還是沒有消息，心裡想著大概不會上了吧，下意識地打開信箱才發現有封 HR<br>的信，說我他們決定給我 Offer 但電話一直打不通，請我回撥談一下 Offer 事宜。</p><p>總之最後如願拿到 Offer 囉。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 2018 年 5 月左右，我的研究主題在實作方面進入了撞牆期，有長達五個月的時間都沒有實質的進展。那陣子每次要跟教授&lt;br&gt;meeting 前都壓力神大，加上看到身邊的同學一個個都進入知名大公司實習，心裡也慢慢埋下找實習的念頭。&lt;/p&gt;
&lt;p&gt;那時候主要找的職缺是 DevOps，因為有我喜愛的 Linux 又有當時很火紅的雲端運算、AWS&lt;br&gt;和分散式運算等名詞，聽起來就超 cool 的。&lt;/p&gt;
&lt;p&gt;我只投了一家做高頻交易的公司，是在清大就業博覽會上有聽到他們家的 pitch，面試後也拿到&lt;br&gt;offer，殊不知後來 KKStream 主動連絡上我，且開出比高頻交易公司更好的&lt;br&gt;Offer，僅以此篇記錄下整個面試過程給大家參考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Job" scheme="http://jordanhuang.tw/tags/Job/"/>
    
      <category term="Interview" scheme="http://jordanhuang.tw/tags/Interview/"/>
    
      <category term="KKStream" scheme="http://jordanhuang.tw/tags/KKStream/"/>
    
      <category term="KKBox" scheme="http://jordanhuang.tw/tags/KKBox/"/>
    
      <category term="SRE" scheme="http://jordanhuang.tw/tags/SRE/"/>
    
  </entry>
  
  <entry>
    <title>讓 TX2 boot on Hyp mode並啟動 KVM</title>
    <link href="http://jordanhuang.tw/2018/01/03/Enable-kvm-module-on-tx2/"/>
    <id>http://jordanhuang.tw/2018/01/03/Enable-kvm-module-on-tx2/</id>
    <published>2018-01-03T06:24:50.000Z</published>
    <updated>2023-02-11T07:32:17.106Z</updated>
    
    <content type="html"><![CDATA[<p>近期由於實驗需要，必須在TX2上開啟 KVM(Kernel virtual machine)功能。</p><h2 id="Pre-requirement"><a href="#Pre-requirement" class="headerlink" title="Pre-requirement"></a>Pre-requirement</h2><ol><li><a href="https://github.com/good5dog5/buildJetsonTX2Kernel" target="_blank" rel="noopener">BuildJetsonTx2Kernel</a>, 用來做native<br>compile。雖然速度慢了點，但能先擺脫掉設定 cross-compile 的複雜問題</li><li>一台安裝好 JetPack3.1 的 Host 主機,下載和安裝步驟請參考<a href="https://developer.nvidia.com/embedded/linux-tegra" target="_blank" rel="noopener">說明</a></li></ol><h2 id="Step"><a href="#Step" class="headerlink" title="Step"></a>Step</h2><p>在 TX2 上執行</p><ol><li><code>git clone https://github.com/good5dog5/buildJetsonTX2Kernel &amp;&amp; cd buildJetsonTx2Kernel</code></li><li><code>sudo ./getKernelSources.sh</code><br>這時候會跳出 menuconfig 的視窗，選擇 Virtualization -&gt; Enable KVM; 然後 Save &amp; Exit</li><li>sudo ./makeKernel.sh<br>開始編譯 kernel image 和 dtb 檔案, 在這步驟會將一些 patch 打入 source tree。</li><li>./copyImage.sh<br>將編譯好的 <code>Image</code> 檔複製到 /boot資料夾下</li><li><p>將 TX2  $kernel/arch/arm64/boot/dts/tegra186-quill-p3310-1000-c03-00-base.dtb 搬到 Host 的<br>$JetPack_L4T_3.1/64_TX2/Linux_for_Tegra_tx2/kernel/dtb 中</p></li><li><p>讓 TX2 進入 <code>recovery mode</code>, 並執行 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./flash -r -k kernel-dtb jetson-tx2 mmcblk0p1</span><br></pre></td></tr></table></figure></li><li><p>重新啟動 TX2, 執行 <code>dmesg | grep &quot;kvm&quot;</code> 應該能看到如下畫面。<br><img src="https://i.imgur.com/L1zCpqA.png" alt="Success"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期由於實驗需要，必須在TX2上開啟 KVM(Kernel virtual machine)功能。&lt;/p&gt;
&lt;h2 id=&quot;Pre-requirement&quot;&gt;&lt;a href=&quot;#Pre-requirement&quot; class=&quot;headerlink&quot; title=&quot;Pre-r
      
    
    </summary>
    
    
      <category term="KVM" scheme="http://jordanhuang.tw/tags/KVM/"/>
    
      <category term="kernel" scheme="http://jordanhuang.tw/tags/kernel/"/>
    
      <category term="hack" scheme="http://jordanhuang.tw/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>Flash TX2 with default Root FileSystem(R28.1)</title>
    <link href="http://jordanhuang.tw/2017/12/20/tx2-reflash-with-sample-rootfs/"/>
    <id>http://jordanhuang.tw/2017/12/20/tx2-reflash-with-sample-rootfs/</id>
    <published>2017-12-19T16:00:00.000Z</published>
    <updated>2017-12-20T07:17:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TX2-Mess-up"><a href="#TX2-Mess-up" class="headerlink" title="TX2 Mess up"></a>TX2 Mess up</h2><p>在TX2上編譯了新的kernel feature，發現開機後會有問題(完壞了啦QQ)，心想還好之前有做好備份，但用<code>flash.sh</code><br>restore會卻遲遲沒有開機畫面。用<code>minicom</code>進去看才發現一直kernel panic。</p><p>這大概就是刷機界所謂的<code>變磚</code>吧。還好可以刷回原本default的root file sytem.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/jordan/working/prj_qcuda/JetPack_L4T_3.1/64_TX2/Linux_for_Tegra_tx2/rootfs</span><br><span class="line">sudo rm * -rf</span><br><span class="line"></span><br><span class="line"><span class="comment"># jetpack_download 中含有所有裝JetPack3.1時所下載的檔案</span></span><br><span class="line"> </span><br><span class="line">sudo tar xpf ../../../jetpack_download/Tegra_Linux_Sample-Root-Filesystem_R28.1.0_aarch64.tbz2 </span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根據我目前的理解，`apply_binaries.sh` 會將 rootfs 打包成名為 `system.img`的檔案並放到 bootloader中</span></span><br><span class="line">sudo ./apply_binaries.sh</span><br><span class="line">sudo ./flash.sh jetson-tx2 mmcblk0p1</span><br></pre></td></tr></table></figure><p>整個過程大概在30分鐘內完成,平常真的要做好備份阿。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://devtalk.nvidia.com/default/topic/1012364/jetson-tx2/how-to-flashing-jetson-tx2-and-setup-network-correctly-/post/5162292/#5162292" target="_blank" rel="noopener">How to flashing Jetson TX2 and setup network<br>correctly?</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TX2-Mess-up&quot;&gt;&lt;a href=&quot;#TX2-Mess-up&quot; class=&quot;headerlink&quot; title=&quot;TX2 Mess up&quot;&gt;&lt;/a&gt;TX2 Mess up&lt;/h2&gt;&lt;p&gt;在TX2上編譯了新的kernel feature，發現開機後會有問題
      
    
    </summary>
    
    
      <category term="hack" scheme="http://jordanhuang.tw/tags/hack/"/>
    
      <category term="TX2" scheme="http://jordanhuang.tw/tags/TX2/"/>
    
      <category term="rootfs" scheme="http://jordanhuang.tw/tags/rootfs/"/>
    
  </entry>
  
  <entry>
    <title>Libreoffice5 使用筆記</title>
    <link href="http://jordanhuang.tw/2016/07/18/libreoffice-use-note/"/>
    <id>http://jordanhuang.tw/2016/07/18/libreoffice-use-note/</id>
    <published>2016-07-17T18:37:08.000Z</published>
    <updated>2016-08-04T04:28:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>相較於MS office，libreoffice系列的手冊或教學相對的少，此篇用來紀錄使用上遇到的問題與解法。</p><a id="more"></a><p>#Calc</p><h3 id="修改中文輸入成直書"><a href="#修改中文輸入成直書" class="headerlink" title="修改中文輸入成直書"></a>修改中文輸入成直書</h3><p>Format &gt; Cells &gt; [alignment] &gt; <code>vertically stack</code> checkbox<br><img src="http://i.imgur.com/cDefocW.png" alt="修改前"><br><img src="http://imgur.com/UxYiObR.png" alt="修改後"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相較於MS office，libreoffice系列的手冊或教學相對的少，此篇用來紀錄使用上遇到的問題與解法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="libreoffice" scheme="http://jordanhuang.tw/tags/libreoffice/"/>
    
  </entry>
  
  <entry>
    <title>利用 GNU Privacy Guard (GPG) 加解密檔案</title>
    <link href="http://jordanhuang.tw/2016/07/09/%E5%88%A9%E7%94%A8gpg%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%AA%94%E6%A1%88/"/>
    <id>http://jordanhuang.tw/2016/07/09/利用gpg加解密檔案/</id>
    <published>2016-07-08T19:50:42.000Z</published>
    <updated>2023-02-11T07:32:17.112Z</updated>
    
    <content type="html"><![CDATA[<p>GPG 是 unix-based<br>系統常用的加解密工具，各種常用的應用如信件軟體和通訊軟體都依靠他來保證雙向通訊的安全。<br>簡單紀錄一下如何利用 gpg 對檔案進行加解密。</p><a id="more"></a><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><h2 id="OSX"><a href="#OSX" class="headerlink" title="OSX"></a>OSX</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gnupg</span><br></pre></td></tr></table></figure><h2 id="其他作業系統"><a href="#其他作業系統" class="headerlink" title="其他作業系統"></a>其他作業系統</h2><p>可到 <a href="https://www.gnupg.org/download/#binary" target="_blank" rel="noopener">GnuPG</a> 下載對應安裝檔。</p><h3 id="Encrypt"><a href="#Encrypt" class="headerlink" title="Encrypt:"></a>Encrypt:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gpg --cipher-algo AES256 --symmetric filename.tar.gz</span><br><span class="line"></span><br><span class="line">#等同</span><br><span class="line">gpg --cipher-algo AES256 -c filename.tar.gz</span><br></pre></td></tr></table></figure><p>會產生名為 <code>filename.tar.gz.gpg</code>的加密檔，原來的<code>filename.tar.gz</code>亦存在。</p><h3 id="Decrypt"><a href="#Decrypt" class="headerlink" title="Decrypt:"></a>Decrypt:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gpg --output filename.tar.gz --decrypt filename.tar.gz.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同</span></span><br><span class="line">gpg -o filename.tar.gz -d filename.tar.gz.gpg</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GPG 是 unix-based&lt;br&gt;系統常用的加解密工具，各種常用的應用如信件軟體和通訊軟體都依靠他來保證雙向通訊的安全。&lt;br&gt;簡單紀錄一下如何利用 gpg 對檔案進行加解密。&lt;/p&gt;
    
    </summary>
    
    
      <category term="gpg" scheme="http://jordanhuang.tw/tags/gpg/"/>
    
      <category term="gnu" scheme="http://jordanhuang.tw/tags/gnu/"/>
    
      <category term="crypto" scheme="http://jordanhuang.tw/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>PyCon TW 2016參加心得</title>
    <link href="http://jordanhuang.tw/2016/06/05/PyCon2016-review/"/>
    <id>http://jordanhuang.tw/2016/06/05/PyCon2016-review/</id>
    <published>2016-06-05T02:35:00.000Z</published>
    <updated>2023-02-11T07:32:17.107Z</updated>
    
    <content type="html"><![CDATA[<p>感謝Jserv老師贈票，讓我有機會參加2016 PyCon TW盛會，這是我第一次參加大型的opensource聚會，三天下來聽了很多有趣的演講，吸收了不少新知識，利用此篇來備忘一下～ </p><a id="more"></a><ul><li><a href="https://hackfoldr.org/pycontw2016/https%253A%252F%252Fhackmd.io%252Fs%252FSy-PYcHM" target="_blank" rel="noopener">PyCon2016共筆</a></li></ul><h1 id="PyCon-TW簡介"><a href="#PyCon-TW簡介" class="headerlink" title="PyCon TW簡介"></a>PyCon TW簡介</h1><blockquote><ul><li>2008 年和 2011 年，thinker 籌畫了 PyCTW，也是 PyCon Taiwan 的前身。當時還是一日的活動，讓各地的 Python 愛好者能一整天聚在一起。</li></ul></blockquote><blockquote><ul><li>2012 年 yyc 與各社群參與者，催生了第一屆 PyCon Taiwan，議程主題以科學運算為主，也包含各種 Python 的小工具。從第一屆開始，就決定要遵從 PyCon US 的 <a href="http://jessenoller.com/2011/05/25/pycon-everybody-pays/" target="_blank" rel="noopener">Everybody Pays</a> 原則，不論是講者還是工作人員都要購票進場，這也成為與當時台灣其他研討會不同的特色。這屆設定了 250 報名人數上限，也順利完售。</li></ul></blockquote><blockquote><ul><li>2013 年，續任主席的 yyc 決定擴大 PyCon Taiwan 的規模，並嘗試了許多新活動。在大會開始前，與良葛格合作，試辦收費的 Python 教學課程，報名非常踴躍，額滿後還有很多人詢問是否能加開課程。也在大會第一天議程結束，BoF 同好分享的時間，嘗試加入夜市活動。請來了音樂家現場演奏，搭配自助餐點及各社群的擺攤，有得吃也有得玩，成為本次大會的一大亮點。也因此，課程與夜市成為 PyCon Taiwan 的定番。yyc 也留下了心得。</li></ul></blockquote><blockquote><ul><li>2014 年，Tim Hsu 從 yyc 接下 PyCon Taiwan 主席的工作。這年，我們要幹一票大的：接下亞太區 PyCon 的聖火，成為 PyCon APAC/Taiwan，定了新標語：「from everything import python」。與 CheckIO 合作舉辦 Python 解題競賽。為了顧及議程品質與贊助商曝光，特別規劃了贊助商 Show Time，以及 Job Fair 的活動。</li></ul></blockquote><blockquote><ul><li>2015 年，由 Keith Yang 接任主席，再次承辦亞太區 PyCon 年會。2015 年也是電影回到未來續集主角馬蒂穿越時空抵達的年份。大會也呼應電影，將標語定為「Back to <strong>future</strong> II」，也有「回到未來夜市」。議程方向希望帶領大家，瞭解如何利用 Python 去實踐一些想法，或是應用 Python 在不同領域的研究。同時也規劃了多堂課程，從基本的 Python 入門課，到寫網路爬蟲、資料探勘、訊號處理，或是與硬體樹莓派的互動。到了大會尾聲，大抽獎的時間，嘗試將台灣夜市傳統的 Bingo 遊戲結合網路技術，讓台下所有的會眾能從手機上，即時看到自己的號碼與連線，搭配越來越奇怪的賓果條件，歡樂指數破表。</li></ul></blockquote><blockquote><ul><li>2016 年，也就是今年，回歸到 PyCon Taiwan，讓我們「Implement the Future, Together !」 </li></ul></blockquote><p>PyCon有很特別的 <code>everybody Pays</code>原則，有別於一般研討會常免除講者，甚至工作人員報名費的習慣，所有的參加者都需要付費，一視同仁，上面連結的原文不好了解的話可以參考<a href="https://tw.pycon.org/2013/zh/blog/2013/03/05/everybody-pays-zh/" target="_blank" rel="noopener">這篇</a>的解說。</p><h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="Keynote-明日之後的世界-The-world-after-tomorrow-唐鳳"><a href="#Keynote-明日之後的世界-The-world-after-tomorrow-唐鳳" class="headerlink" title="Keynote: 明日之後的世界 (The world after tomorrow) - 唐鳳"></a>Keynote: 明日之後的世界 (The world after tomorrow) - 唐鳳</h2><ul><li>蔡英文總統的第一家庭成員是幾隻貓，這樣的好處是，你無法賄賂第一家庭XD</li><li>台灣最近的政治人物的改變很有趣，都變成是無黨籍的，形成先問政策不問黨派的現象</li><li>太陽花數位體驗營：意識形態就不是那麼重要了，重要的是如何形成共識。</li><li>Game with Purpose，民主也可能是Game with Purpose。</li><li><code>法令可否送patch，或merge呢？把opensource開發的經驗，轉移到法令或法制的體系</code></li></ul><p><em>意識型態：一個人對於既定印象的認定之後，可以不問事實，不管其他人想法，就做出某些推論，我的推論就是對的，別人都是錯的。（眼中只有自我，沒有他人）</em></p><h3 id="Open-source-and-Open-goverment"><a href="#Open-source-and-Open-goverment" class="headerlink" title="Open-source and Open goverment"></a>Open-source and Open goverment</h3><pre><code>開放資料: 讓台灣變成機器可讀的國家。</code></pre><h3 id="資料公開跟開放有什麼差別呢？"><a href="#資料公開跟開放有什麼差別呢？" class="headerlink" title="資料公開跟開放有什麼差別呢？"></a>資料公開跟開放有什麼差別呢？</h3><pre><code>公開：只是公開人類可讀的資料，例如 pdf 檔，無法再利用。開放：政府在釋出資料是機器可以讀的，例如csv、xml、xls，而不是只有人類可以讀懂，電腦可以利用這些資料進行分析跟視覺化呈現給更多人看，達到大眾可以讀懂的目的</code></pre><ul><li>前行政院長張善政，在交接時規定，所有的交接資料須先上傳到<a href="http://www.slideshare.net/" target="_blank" rel="noopener">slideshare</a>，讓人民與內閣成員先看過之後才能進行下個階段 </li></ul><h3 id="公民黑客運動"><a href="#公民黑客運動" class="headerlink" title="公民黑客運動"></a>公民黑客運動</h3><p>世界上有如此規模的公民黑客運動，只有兩個地方，這裡跟西班牙。<br>西班牙跟台灣有哪些相似的地方呢？</p><pre><code>* 解除報禁、解除戒嚴，剛好遇到電腦網路興起。* 因此覺得言論自由跟網路的興起是息息相關的。* 台灣的社會運動解禁與網路興起能夠相結合，而在國外則分流成兩群人，國外的社會運動參與者大多都有比較外向的性格。* 相對在台灣解除報禁、媒體的開放激起在電腦前的技術宅人員對社會運動的參與跟期待。* 在台灣和西班牙的相似點，能夠接觸網路的這一代，剛好是有言論自由的一代。</code></pre><h3 id="vTaiwan的誕生"><a href="#vTaiwan的誕生" class="headerlink" title="vTaiwan的誕生"></a>vTaiwan的誕生</h3><p><a href="https://vtaiwan.tw/" target="_blank" rel="noopener">vTaiwan</a> 是取自 perl 6 等等社群的開發經驗而來。<br>一開始大家開始提案，提出大家最想解決的社會議題，並且投票選出最想解決的議題，Uber的問題得到第1高票。</p><p>Uber的共享經濟像是一種流行性感冒，到處延燒，但對於Uber的定價、提供給乘客的資訊或是品質等等規範，政府的法令卻是對他們一點辦法都沒有。</p><pre><code>* 依照流行病學的看法：接種疫苗去對待共享經濟，也就是讓乘客去意識到Uber所帶來的優缺點，想辦法讓公民去（立法）規範他們* Uber(共享經濟的變種)，巴黎市政府把其辦公室超掉了，但app仍然繼續跑XD* Ref: [快思慢想](http://www.books.com.tw/products/0010567579)</code></pre><p>從一開始的4個族群在平台上的討論，分別是計程車隊司機、Uber司機、乘客，還有（最後一個忘記了XD）。<br>在平台上大家會各自提出自己的看法跟意見，並且也陳述各自找到的事實，每個人可以對別人的意見按讚，當你對別人的意見表示贊同時，你所代表的點就會往某個族群方向靠。</p><p>起初，4個族群分別群聚在一起，而且各自聚集到4個角落，變成毫無交集的四群人，但是經由時間的演變，大家試圖去找出可能的共識，大家開始提出很trivial的意見，像是安全第一，就拿了很高的贊成票。</p><p>台灣人有個有趣的現象，當有人考了 90 分，就會有人想要考 91 分、92 分。<br>當時 <a href="https://pol.is/home" target="_blank" rel="noopener">pol.is</a> 討論的<a href="https://pol.is/3phdex2kjf" target="_blank" rel="noopener">共識</a>，最高得到了 95 高分。(目前是 93 分)</p><h3 id="審議式民主"><a href="#審議式民主" class="headerlink" title="審議式民主"></a>審議式民主</h3><p>在線上只要邀請大家不是用馬上做出決定的方式，是把事實攤出來讓大家慢慢討論有共識，這樣的做法引進到公部門的時候，做出決策的品質會比開專家會議還要來得好的。</p><p>階段：</p><pre><code>* 最低階民主參與方式是投票* 再來是將各自的資料跟事實呈現出來* 依據以上的事實提出各自的看法跟意見* 將各自的看法凝聚成共識* 讓共識進一步成為規範或是法條* 延伸閱讀：[審議式民主的理念與主張](http://nccur.lib.nccu.edu.tw/bitstream/140.119/34508/9/52501109.pdf)</code></pre><h3 id="社會議題"><a href="#社會議題" class="headerlink" title="社會議題"></a>社會議題</h3><p>有些議題並非目前主流媒體所關注的部分，因此318之後有許多人開始新興媒體</p><blockquote><p>不要恨媒體，自己作媒體</p></blockquote><p><a href="https://www.twreporter.org/" target="_blank" rel="noopener">報導者</a> 用開源的程式碼可以讓未來可以持續由眾人更新，報導跟圖片也全部採用 cc 類授權，當維護者離開時，也有人可以接手做後續的維護。</p><p><a href="http://talkto.tw/" target="_blank" rel="noopener">政問</a> 用 360 度的環場攝影機去直播，但是攝影環境決定了名嘴講話的方式，所以他會很注意身邊的人是不是有沒有聽懂，營造彼此互相聆聽的氣氛，讓事情能夠被說得更清楚。 Ex: <a href="http://data.tainan.gov.tw/dataset/project-plan" target="_blank" rel="noopener">台南的飛雁新村專案計畫</a></p><h3 id="問題討論"><a href="#問題討論" class="headerlink" title="問題討論"></a>問題討論</h3><ul><li>為什麼 ptt 這麼鳥的介面以及難用的 UX 體驗不會被淘汰 是因為他夠難用而且具有資料隱密性？ 還是這是胎灣囡波萬的文化使然？<blockquote><p>如果有用過 reddit 或 hackernews 也知道那個比 ptt 醜很多，但是也因為他夠難用才有一個門檻，通過某些檢驗，如此討論的素質就可以較高，難用的 UX 是凝聚社群的好方法 XD<br>覺得應該不能說 如此討論的素質就可以較高 ，應該是較為<strong>一致</strong>，畢竟設立門檻無法保證討論素質</p></blockquote></li></ul><h2 id="keynote-Python-導入系統軟體教學-Jserv"><a href="#keynote-Python-導入系統軟體教學-Jserv" class="headerlink" title="keynote: Python 導入系統軟體教學 - Jserv"></a>keynote: Python 導入系統軟體教學 - Jserv</h2><h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>系統軟體一般指編譯器、作業系統、虛擬機器，動態二進位轉換/編譯器一類所謂「比較硬」的軟體技術，往往需要搭配計算機架構 / 平行計算 / 網路架構 / GPU 等背景知識的熟稔，開發者必須破除典型以計算為主的思維，在系統層面觀察實際資料的流動，佐以軟硬體綜合規劃的方式去分析系統運作，從而改善效能。講者這四年在大學任教，就是帶著學生理解各式系統軟體，不乏「自幹」前述元件作為基礎訓練，過程中透過 Python 縮減系統驗證、自動化設計，以及視覺化的成本，希望藉由本議程分享相關經驗</p><h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><pre><code>* 邱吉爾：「所謂勇氣，是能夠一而再、再而三失敗，還不喪失熱情」* 愛爾蘭小說家 James Joyce: 「錯誤是通往新發現的入口」 (Mistakes are the portals of discovery)* T.S.Eliot:「出發了很久以後，我們又回到起點。在那裡，我們重新認識這個地方。」</code></pre><ul><li>把公司做專案管理那一套拿來管理學生</li><li>系統軟體就是讓硬體有生命</li><li>每天泡在開源發展，每天都跟大牛合作，不牛逼也難</li><li>漸進式開發，從規模小但富有特色的專案開始研究及貢獻</li><li>透過在 <a href="http://events.linuxfoundation.org/" target="_blank" rel="noopener">Linux Foundation</a> 的眾多研討會發表來獲取認同及知名度(每年都投，總會上吧！)</li><li>學生來PyCon，是來接觸「<code>學校不教的事</code>」 所以除此之外都是老師的事 (？)</li><li>「不要花太多時間追逐看起來很實用的專業。世界變化太快，這類專業多半存活幾年就會被取代。你還是要能從本質上了解現象與知識的關聯，才不會被每天冒出來的新詞迷惑。良好的基礎科學訓練仍然是把實務專業做好的基礎。」- 蔡志浩博士 </li></ul><h3 id="Use-Grasp-to-visualize-scheduling"><a href="#Use-Grasp-to-visualize-scheduling" class="headerlink" title="Use Grasp to visualize scheduling"></a>Use Grasp to visualize scheduling</h3><ul><li><a href="http://wiki.csie.ncku.edu.tw/embedded/Lab40" target="_blank" rel="noopener">NCKU’s Lab40</a><br><img src="http://wiki.csie.ncku.edu.tw/embedded/Lab12/hsf.png" alt="visualize"></li></ul><h3 id="前瞻火箭計畫"><a href="#前瞻火箭計畫" class="headerlink" title="前瞻火箭計畫"></a>前瞻火箭計畫</h3><ul><li><a href="http://arrc.tw/" target="_blank" rel="noopener">官網</a></li><li><a href="http://www.wikiwand.com/zh-tw/國立交通大學前瞻火箭研究中心" target="_blank" rel="noopener">wiki</a></li></ul><p><em>台灣本土火箭 要讓太空旅行夢想成真 | 吳宗信 Jong-Shinn Wu | TEDxTaipei</em> </p><iframe width="560" height="315" src="https://www.youtube.com/embed/7B9Up161sAI" frameborder="0" allowfullscreen></iframe><ul><li>We choose to go to the moon. We choose to go to the moon in this…, <code>not because they are easy, but because they are hard</code>, because …, because that challenge is one that we are willing to accept, one we are unwilling to postpone, and one which we intend to win, and the others, too. </li><li>火箭就是一場控制爆炸的表演藝術</li></ul><p><em>公視獨立特派員: 帶我去太空01</em></p><iframe width="560" height="315" src="https://www.youtube.com/embed/tVwboPfcPVk" frameborder="0" allowfullscreen></iframe><p><em>公視獨立特派員: 帶我去太空02</em></p><iframe width="560" height="315" src="https://www.youtube.com/embed/5hPrj829Mg4" frameborder="0" allowfullscreen></iframe><p><em>公視獨立特派員: 帶我去太空03</em></p><iframe width="560" height="315" src="https://www.youtube.com/embed/VtXIF_XD7zs" frameborder="0" allowfullscreen></iframe><p><em>Shimon Schocken and Noam NisanThe: self-organizing computer course</em></p><iframe src="https://embed-ssl.ted.com/talks/shimon_schocken_the_self_organizing_computer_course.html" width="854" height="480" frameborder="0" scrolling="no" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe><p><em>Linus Torvalds: The mind behind Linux</em></p><p><iframe src="https://embed-ssl.ted.com/talks/linus_torvalds_the_mind_behind_linux.html" width="854" height="480" frameborder="0" scrolling="no" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe></p><h2 id="Talk-那些年，我用-Django-Admin-接的案子-Michelle-Leu"><a href="#Talk-那些年，我用-Django-Admin-接的案子-Michelle-Leu" class="headerlink" title="Talk: 那些年，我用 Django Admin 接的案子 - Michelle Leu"></a>Talk: 那些年，我用 Django Admin 接的案子 - Michelle Leu</h2><ul><li><a href="https://carolhsu.gitbooks.io/django-girls-tutorial-traditional-chiness/content/" target="_blank" rel="noopener">Django Girls 教學</a><br>這場演講講的是利用<code>Django Admin</code>去做些後台管理和佈署的工作，可能要有<code>Django</code>的使用經驗會比較聽得懂。</li></ul><h2 id="Talk-Boost-Maintainability-Mosky-Liu"><a href="#Talk-Boost-Maintainability-Mosky-Liu" class="headerlink" title="Talk: Boost Maintainability - Mosky Liu"></a>Talk: Boost Maintainability - Mosky Liu</h2><p><a href="https://speakerdeck.com/mosky/boost-maintainbility" target="_blank" rel="noopener">Slides</a></p><ul><li>我們在開發程式的時候，都是 “read lines randomly” 的，不像電腦會逐行讀取。<blockquote><p> <a href="http://www.joelonsoftware.com/articles/Wrong.html" target="_blank" rel="noopener">Making wrong code look wrong</a> - Joel on software</p></blockquote></li></ul><p><em>Ex1</em><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next_page = page + <span class="number">1</span></span><br><span class="line">page = make_html(...)</span><br></pre></td></tr></table></figure></p><p>改成下者後，可以明顯看出<code>next_page_no</code>是代表純數，<code>page_html</code>代表字串，可以防止對他們做不相干的運算而造成錯誤<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">next_page_no = page + <span class="number">1</span></span><br><span class="line">page_html = make_html(...)</span><br></pre></td></tr></table></figure></p><h3 id="Maintainability"><a href="#Maintainability" class="headerlink" title="Maintainability"></a>Maintainability</h3><p>用人讀 code 的方式來定義 Maintainability </p><blockquote><p>To understand a random line, the lines you need to read back.</p></blockquote><p>相對於programmer的時間，運算資源比較不值錢。<br>把時間專注於想要做的事情，而不是 debug 上面。</p><ul><li>Be exact &amp; consistent (命名要精準且有一致性)</li></ul><p><em>Ex2</em></p><p>以這種方式來命名不夠準確所以很容易混亂<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = ...</span><br><span class="line">result = ...</span><br></pre></td></tr></table></figure></p><p>把result更明確的說明是何結果，例如為resp(response)，和解析過後的dictionary<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp = ...</span><br><span class="line">parsed_dict = ...</span><br></pre></td></tr></table></figure></p><p><em>Ex3</em><br>用d來標示dictionary<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = User(...)</span><br><span class="line">user_d = &#123;&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Hint: func 的命名如果沒有取名好，那發現問題還需要查 document，這個更耗時<br>建議：func都用動詞開頭，就會記得加上()</p></blockquote><p>不要把 <code>is_secure = True</code> 與 <code>req.is_secure()</code> 混用<br>以 <code>形容詞</code>、<code>介係詞</code> 來當 boolean 會比較好<br>或者用簡單的句子來表示 boolean: <code>req_is_secure = True</code></p><ul><li>常常用 dictionary，對一個領域不熟悉的話可以多查字典來找到更好的名字哦！</li></ul><h3 id="Boost-Maintainability"><a href="#Boost-Maintainability" class="headerlink" title="Boost Maintainability"></a>Boost Maintainability</h3><ul><li>Define our “Maintainability”</li><li>Making it <code>zero</code></li><li>progressive from <code>zero</code></li></ul><h3 id="avoid-None"><a href="#avoid-None" class="headerlink" title="avoid None"></a>avoid <code>None</code></h3><p>考慮:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = query_user(uid)</span><br><span class="line">user.is_valid()</span><br></pre></td></tr></table></figure></p><p>如果查不到 user 就 ret None 的話，就會噴 Error 囉！<br>這時要考量的，就是設計者接不接受使用exception</p><pre><code>N: user dummy object like an empty string.Y: just raise when you wanna assign to None.</code></pre><h3 id="Structure-Hint"><a href="#Structure-Hint" class="headerlink" title="Structure Hint"></a>Structure Hint</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">users = &#123;</span><br><span class="line"><span class="string">'mosky'</span>: <span class="string">'mosky@email'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下者更為直覺，一看就懂<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uid_email_map = &#123;</span><br><span class="line"><span class="string">'mosky'</span>: <span class="string">'mosky@email'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Progressive-from-zero"><a href="#Progressive-from-zero" class="headerlink" title="Progressive from zero"></a>Progressive from zero</h3><ul><li>不要自己自創縮寫，可以去網站上查</li><li><p>如果只是要在一個 func 裡面用而已，可以用註解來解釋縮寫定義<br>（目前著重於讓人能夠更快讀懂 code，所以才這樣說）</p><p><em>Ex</em></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">receiver_address_dict <span class="comment">#太長了，而且只在這個函式裡頭使用</span></span><br><span class="line"><span class="comment"># rad: receiver address dict</span></span><br><span class="line">rad = ...</span><br></pre></td></tr></table></figure></li><li><p>把程式分段跟分節</p><ul><li>把做一系列事情的分段及分節</li><li>用 空行 來把不同的事情分隔開</li><li><p>用 section 的方式來切開（Title comment 來區隔開不同的區塊）<br><em>Ex</em></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_or_get</span><span class="params">(url)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> has_cache(url):</span><br><span class="line"><span class="keyword">return</span> get_cache(url)</span><br><span class="line"></span><br><span class="line">content = request(url)</span><br><span class="line">set_cache(url, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> content</span><br></pre></td></tr></table></figure><p>分段分節後</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Check arguments</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Query from table</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Transform</span></span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="Talk-用Numpy做一個自己的股票分析系統-PF"><a href="#Talk-用Numpy做一個自己的股票分析系統-PF" class="headerlink" title="Talk: 用Numpy做一個自己的股票分析系統 - PF"></a>Talk: 用Numpy做一個自己的股票分析系統 - PF</h2><p><a href="http://slides.com/iampf/pycon-2016" target="_blank" rel="noopener">Slides</a></p><ul><li>使用過去的股票資料去預測未來資訊，建立在<code>歷史會不斷重演</code>的基礎上</li><li>“上帝不擲骰子” - 愛因斯坦</li><li>過去的股市與期貨資料可到 <em>台灣證券交易所</em> 和 <em>台灣期貨交易所</em> 下載</li><li>平均移動線，K線，隨機指標</li><li>利用<a href="http://www.numpy.org/" target="_blank" rel="noopener">Numpy</a>加速運算</li></ul><h2 id="Talk-轉轉轉好運旺來一起來之雲端轉檔大作戰！-林進錕"><a href="#Talk-轉轉轉好運旺來一起來之雲端轉檔大作戰！-林進錕" class="headerlink" title="Talk: 轉轉轉好運旺來一起來之雲端轉檔大作戰！ - 林進錕"></a>Talk: 轉轉轉好運旺來一起來之雲端轉檔大作戰！ - 林進錕</h2><p><a href="http://www.slideshare.net/ssuser25242a/ss-62714359" target="_blank" rel="noopener">Slides</a></p><p>這場演講令人印象深刻，講者除了職業是工程師外，還嘗試了很多宅宅工程師鮮少嘗試的事情，例如：為了自給自足而務農，攀岩泛舟，樂團主唱等等，原來工程師的生活也可以如此多元。此場演講全程以台語為主，英語的專有名詞為輔，講者流暢的台英語切換也是令我印象深刻的點之一。</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>講者的工作需要對影片進行編碼，一部影片須轉成多種畫質(1080P, 720P…)並發布在各種平台(Android, iOS, Edge…)，面對每天上千部待處理的影片，需要一個工作分配的workflow，能把工作平均地分配到閒置的機器進行運算，達到load balancing。</p><h3 id="Review-current-solutions"><a href="#Review-current-solutions" class="headerlink" title="Review current solutions"></a>Review current solutions</h3><p>講者的需求中，不需要管理Job server，去中心化，Worker可以根據需求被臨時加入，且不同需求的worker其效能可以不同。</p><ul><li><p><a href="https://www.wikiwand.com/en/Gearman" target="_blank" rel="noopener">Gearman</a></p><ul><li>須要管理Job server</li><li>從worker角度出發，看不到workflow</li></ul></li><li><p><a href="https://github.com/spotify/luigi" target="_blank" rel="noopener">Spotify luigi</a></p><ul><li>須要管理Job server</li><li>從Task角度出發，看不到workflow</li></ul></li></ul><h3 id="KKBOX-MASS"><a href="#KKBOX-MASS" class="headerlink" title="KKBOX: MASS"></a><a href="https://github.com/kkbox/mass" target="_blank" rel="noopener">KKBOX: MASS</a></h3><ul><li>不須維護Job server，Based on Amazon SWF(Simple Workflow)，無中心化server,無資料庫</li><li>從Job角度，以Top-down來描述workflow，並用pythonic code代表一個job</li><li>可動態調整worker種類及數量</li></ul><h2 id="Talk-Continuous-Deployment-in-AWS-Lambda-and-Python-Suiting"><a href="#Talk-Continuous-Deployment-in-AWS-Lambda-and-Python-Suiting" class="headerlink" title="Talk: Continuous Deployment in AWS Lambda and Python - Suiting"></a>Talk: Continuous Deployment in AWS Lambda and Python - Suiting</h2><p><a href="http://www.slideshare.net/suitingtseng/continuous-deployment-in-aws-lambda" target="_blank" rel="noopener">Slides</a></p><h3 id="AWS-Lambda"><a href="#AWS-Lambda" class="headerlink" title="AWS Lambda"></a>AWS Lambda</h3><p>AWS Lambda is a <code>zero-administration</code> compute platform for <code>back-end</code> web developers that runs your code for you in the AWS cloud and provides you with a <code>ﬁne-grained pricing structure</code>.</p><p>AWS Lambda is a <code>serverless compute service</code> that runs your code in response to events and automatically manages the underlying compute resources for you. You can use AWS Lambda to <code>extend other AWS services</code> with custom logic, or create your own back-end services that operate at AWS scale, performance, and security. AWS Lambda can <code>automatically run code in response to multiple events</code>, such as modifications to objects in Amazon S3 buckets or table updates in Amazon DynamoDB.</p><h2 id="Talk-Ethereum-漲好快！快用-pyethapp-玩耍區塊鏈貨幣與建立智能契約-梁智程"><a href="#Talk-Ethereum-漲好快！快用-pyethapp-玩耍區塊鏈貨幣與建立智能契約-梁智程" class="headerlink" title="Talk: Ethereum 漲好快！快用 pyethapp 玩耍區塊鏈貨幣與建立智能契約 - 梁智程"></a>Talk: Ethereum 漲好快！快用 pyethapp 玩耍區塊鏈貨幣與建立智能契約 - 梁智程</h2><ul><li><a href="https://bitcoin.org/bitcoin.pdf" target="_blank" rel="noopener">Bitcoin: A Peer-to-Peer Electronic Cash System</a></li></ul><h3 id="剖析Bitcoin"><a href="#剖析Bitcoin" class="headerlink" title="剖析Bitcoin"></a>剖析Bitcoin</h3><ul><li>區塊鏈是一個非集中的、分散式的電子分類賬，追蹤記錄誰擁有多少比特幣，由世界各地所有的比特幣用戶共同維護。</li><li>去中心化，不須第三方信任機構即可避免掉<a href="https://www.youtube.com/watch?v=cOc8V64HUDQ" target="_blank" rel="noopener">double-spending</a></li></ul><h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><h2 id="Keynote-Intentional-Communication-Steve-Dower"><a href="#Keynote-Intentional-Communication-Steve-Dower" class="headerlink" title="Keynote: Intentional Communication - Steve Dower"></a>Keynote: Intentional Communication - Steve Dower</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Do you know how to talk? Do you know how to write? Good! Those are how you tell people about your ideas, whether online, at conferences, in printed media, or in code. But when you talk or write, are you thinking about why? Are you intentional about your message, your medium, and your meaning? In this session, Steve will explore some of the things to think about whenever you sit down to write, stand up to speak, or open your laptop to code. Not everyone will be a better speaker or writer by the end, but you will be able to be a more intentional communicator.</p><h3 id="Being-intentional"><a href="#Being-intentional" class="headerlink" title="Being intentional"></a>Being intentional</h3><ul><li>Who is your audience</li><li>what is your intent</li><li>how will you archieve your intent</li></ul><h3 id="What-does-your-audience-already-have"><a href="#What-does-your-audience-already-have" class="headerlink" title="What does your audience already have ?"></a>What does your audience already have ?</h3><ul><li>knowledge</li><li>assumptions</li><li>experience</li><li>emotions</li><li>flaws</li><li>fears</li></ul><h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><p>Q: speak 是一件很重要的事情，不過要怎麼克服緊張</p><pre><code>我也會緊張，每個人都會緊張，第一次會緊張、第二次比較不會、接下來就不太會緊張了熟悉準備要講的東西，雖然上台會緊張，但只要一開口，那就已經克服大辦恐懼了。</code></pre><p>Q: 如果觀眾對於你的故事不買帳的話，要怎麼做？</p><pre><code>事實上這個真的發生過，不過就是編故事吧，雖然我不推薦</code></pre><p>Q: 你會不會看你的錄影？</p><pre><code>這很尷尬，我才不看 XD而且我的聲音聽起來很好笑</code></pre><h2 id="Talk-Time-series-prediction-implement-on-Python-古宣佑-Hsuanyo"><a href="#Talk-Time-series-prediction-implement-on-Python-古宣佑-Hsuanyo" class="headerlink" title="Talk: Time series prediction implement on Python - 古宣佑 Hsuanyo"></a>Talk: Time series prediction implement on Python - 古宣佑 Hsuanyo</h2><h3 id="Time-series"><a href="#Time-series" class="headerlink" title="Time series"></a>Time series</h3><p>時間數列是指將某一現象所發生的數量變化，依時間的先後順序排列，以揭示隨著時間的推移，這一現象的發展規律，從而用以預測現象發展的方向及其數量。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感謝Jserv老師贈票，讓我有機會參加2016 PyCon TW盛會，這是我第一次參加大型的opensource聚會，三天下來聽了很多有趣的演講，吸收了不少新知識，利用此篇來備忘一下～ &lt;/p&gt;
    
    </summary>
    
    
      <category term="PyCon" scheme="http://jordanhuang.tw/tags/PyCon/"/>
    
      <category term="Python" scheme="http://jordanhuang.tw/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>初探D-Bus與polkit</title>
    <link href="http://jordanhuang.tw/2016/05/26/%E5%88%9D%E6%8E%A2Dbus%E8%88%87polkit/"/>
    <id>http://jordanhuang.tw/2016/05/26/初探Dbus與polkit/</id>
    <published>2016-05-26T06:21:00.000Z</published>
    <updated>2023-02-11T07:32:17.111Z</updated>
    
    <content type="html"><![CDATA[<p>自從把Window manager換成i3之後，很多以往在Gnome不會出現的問題一一浮現，例如當使用Network manager要連上新的Wifi SSID時會出現 <code>WARNING **: Failed to add/activate connection</code>，亦或是用udiskie-mount嘗試掛載usb device會出現<code>Not authorized to perform operation</code>等等，筆者發現這先問題牽扯到很多專有名詞與概念，故利用此篇來紀錄與整理。</p><a id="more"></a><h2 id="D-Bus-Software-Bus"><a href="#D-Bus-Software-Bus" class="headerlink" title="D-Bus (Software Bus)"></a>D-Bus (Software Bus)</h2><p>[wiki]</p><blockquote><p>D-Bus是一個行程間通訊(IPC)及遠端程序呼叫(RPC)機制，可以讓多個不同的電腦程式（Process）在同一臺電腦上同時進行通訊[4]。D-Bus作為freedesktop.org專案的一部份，其設計目的是使Linux桌面環境（如GNOME與KDE等）提供的服務標準化。</p><p>freedesktop.org專案同時也開發了一個稱為libdbus的自由及開放原始碼軟體函式庫，作為規範的參考實作。這個函式庫常與D-Bus本身混淆。也存在著其他的D-Bus實作，像是GDBus (GNOME)[5]，QtDBus (Qt/KDE)[6]，dbus-java[7]以及sd-bus（systemd的一部份）[8]。</p></blockquote><p>[English wiki] (筆者翻譯覺得重要的部份)<br>一個作業系統中常有很多process參與，要為processes間建立一對一的IPC是低效且不可靠的方法。D-Bus提共一個抽象的Software Bus，讓一群彼此需要溝通的processes共享一個虛擬頻道，連接到此software bus的process並不知道底層實作細節，但保證連上後可以彼此通訊。</p><p>Linux的桌面環境藉由創建許多D-Bus實體而得益：</p><ul><li>單一的<code>system bus</code>，可見於所有使用者與processes，提共對system services的存取(services provided by OS or by any system daemon)</li><li>a <code>session bus</code> for each <strong>user login session</strong>, that provides desktop services to user applications in the same desktop session, and allows the integration of the desktop session as a whole.</li></ul><h2 id="解決polkit-agent問題"><a href="#解決polkit-agent問題" class="headerlink" title="解決polkit agent問題"></a>解決polkit agent問題</h2><blockquote><p>An authentication agent is used to make the user of a session prove that the user of the session really is the user (by authenticating as the user) or an administrative user (by authenticating as an administrator). </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install policykit-1-gnome</span><br></pre></td></tr></table></figure><p>定在 <code>~/.xinitrc</code>中加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/policykit-1/polkitd --no-debug</span><br><span class="line">/usr/lib/policykit-1-gnome/polkit-gnome-authentication-agent-1 &amp;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自從把Window manager換成i3之後，很多以往在Gnome不會出現的問題一一浮現，例如當使用Network manager要連上新的Wifi SSID時會出現 &lt;code&gt;WARNING **: Failed to add/activate connection&lt;/code&gt;，亦或是用udiskie-mount嘗試掛載usb device會出現&lt;code&gt;Not authorized to perform operation&lt;/code&gt;等等，筆者發現這先問題牽扯到很多專有名詞與概念，故利用此篇來紀錄與整理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="D-Bus" scheme="http://jordanhuang.tw/tags/D-Bus/"/>
    
      <category term="Polkit" scheme="http://jordanhuang.tw/tags/Polkit/"/>
    
  </entry>
  
  <entry>
    <title>GNU C Preprocessor 常用功能介紹</title>
    <link href="http://jordanhuang.tw/2016/04/29/c-preprocessor-intro/"/>
    <id>http://jordanhuang.tw/2016/04/29/c-preprocessor-intro/</id>
    <published>2016-04-29T04:12:00.000Z</published>
    <updated>2020-09-21T06:31:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>C語言的前置處理(CPP:C Preprocessor)功能強大，了解其使用方法及時機能加快理解他人程式碼的速度與撰碼功力，本篇是我學習的筆記。</p><a id="more"></a><h2 id="Header-files"><a href="#Header-files" class="headerlink" title="Header files"></a>Header files</h2><p><a href="https://gcc.gnu.org/onlinedocs/cpp/Header-Files.html#Header-Files" target="_blank" rel="noopener">[header file section]</a><br>標頭檔內含函數的宣告和macro的定義，能讓眾多<code>source file</code>去引用。</p><p>剛學C的時候，我一直對標頭檔有很深的疑惑：為何不要把函數的宣告和實作寫在同一個<code>.c</code>檔中呢？何必費心的額外準備一個標頭檔再引入呢？</p><p>原來標頭檔有兩個主要目的：</p><ol><li>作業系統會實作一系列系統呼叫(system call)並把相關的界面(interface)紀錄在標頭檔，我們可以透過引用標頭檔的方式使用系統呼叫或其他libries。</li><li>開發專案時，能透過標頭檔整理，集結相關的宣告與macro，並讓有需要相關功能的source files去引用，<code>#include xxx</code>相當於把該標頭檔複製到source files，如果沒有標頭檔則需要在每個原始碼中手動新增修改，增加維護的難度。</li></ol><h2 id="MACRO"><a href="#MACRO" class="headerlink" title="MACRO"></a>MACRO</h2><p>macro是一個名字(identifier)和內容(content)的對應，<code>#define xxx ooo</code>指示CPP，要把文件中所有的xxx轉換成ooo;macro又區分為兩類：</p><ul><li><code>Object-like macro</code>: 看起來像普通物件定義，例如 #define BUFFER_SIZE 1024</li><li><p><code>function-like macro</code>: 和object-like macro一樣，只是後面需要加上<code>()</code>並且可以餵食參數。</p><ul><li><p><code>()</code>前不可有空格會轉換錯誤</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lang_init ()    c_init()</span></span><br><span class="line">lang_init() ==&gt; () c_init()()</span><br></pre></td></tr></table></figure></li><li><p>function-like macro定義好之後，只有在名字後面連接<code>()</code>才會被展開，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foo() <span class="comment">/* optimized inline version */</span></span></span><br><span class="line">...</span><br><span class="line">foo();</span><br><span class="line">funcptr = foo;</span><br></pre></td></tr></table></figure><p><code>foo()</code>會展開成macro的定義，而<code>funcptr</code>則會拿到<code>void foo</code>的位址。</p></li></ul></li></ul><h3 id="GCC-predefined-macro"><a href="#GCC-predefined-macro" class="headerlink" title="GCC predefined macro"></a>GCC predefined macro</h3><p>GCC預先定義好一些object-like macro，可以直接取用，在debug或其他用途上都很方便。</p><ul><li><code>__FILE__</code></li><li><code>__LINE__</code><br>兩者常被組合在一起用來產生錯誤訊息：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"Internal error: "</span></span><br><span class="line"><span class="string">"negative string length "</span></span><br><span class="line"><span class="string">"%d at %s, line %d."</span>,</span><br><span class="line">length, __FILE__, __LINE__);</span><br></pre></td></tr></table></figure></li></ul><h2 id="GCC-preprocessor-related-options"><a href="#GCC-preprocessor-related-options" class="headerlink" title="GCC preprocessor related options"></a>GCC preprocessor related options</h2><p>建構一個程式包含前處理(preprocessing)，編譯(compilation)，轉換成組合語言(assemlby)和連結(linking)，這裡列出一些在前處理步驟有趣的options。</p><ul><li><p><code>-E</code>:令gcc在完成前處理階段後就停止，並把前處理後的結果輸出到STDOUT;輸入中不須前處理的檔案會被忽略掉。</p></li><li><p><code>-save-temps</code> : 把建構過程產生的中介檔案(intermediate files)存下來，例如<code>gcc -c -save-temps foo.c</code>會在當前資料夾下產生</p><ul><li><code>foo.i</code>: 前處理後的結果</li><li><code>foo.s</code>: 轉換成組合語言的結果</li><li><code>foo.o</code>: 連結後的完整結果</li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://wen00072-blog.logdown.com/posts/146624-talk-about-c-macros" target="_blank" rel="noopener">GNU: The C Preprocessor 導讀 </a></li><li><a href="https://gcc.gnu.org/onlinedocs/cpp/index.html" target="_blank" rel="noopener">The C Preprocessor</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C語言的前置處理(CPP:C Preprocessor)功能強大，了解其使用方法及時機能加快理解他人程式碼的速度與撰碼功力，本篇是我學習的筆記。&lt;/p&gt;
    
    </summary>
    
    
      <category term="c" scheme="http://jordanhuang.tw/tags/c/"/>
    
      <category term="Preprocessor" scheme="http://jordanhuang.tw/tags/Preprocessor/"/>
    
      <category term="gcc" scheme="http://jordanhuang.tw/tags/gcc/"/>
    
      <category term="macro" scheme="http://jordanhuang.tw/tags/macro/"/>
    
  </entry>
  
  <entry>
    <title>Skymizer, Nvidia面試心得</title>
    <link href="http://jordanhuang.tw/2016/04/28/interview-skymizer-nvidia/"/>
    <id>http://jordanhuang.tw/2016/04/28/interview-skymizer-nvidia/</id>
    <published>2016-04-28T04:12:00.000Z</published>
    <updated>2019-12-04T02:06:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>其實我沒有認真思考過為何要找暑期實習這件事，只是看到強者們都會努力去爭取這些機會，故利用進Lab前的空檔寫好英文履歷，有幸得到Skymizer和Nvidia的面試邀請，趁著記憶還鮮明時，把過程中的感受及心得記錄下來。</p><a id="more"></a><h2 id="Nvidia-Android-SW-Engineer-軟體開發實習生"><a href="#Nvidia-Android-SW-Engineer-軟體開發實習生" class="headerlink" title="Nvidia - Android SW Engineer 軟體開發實習生"></a>Nvidia - Android SW Engineer 軟體開發實習生</h2><p>這個職位在104的工作描述，是在做Android UX的自動化測試，需要熟悉Java, Python和bash script，因為本身對自動化還蠻狂熱的，就抱著試一試的心態投了履歷，過沒幾天就得到人資的回覆，外商做事果然有效率。 </p><p>面試主要分成上機測試和聊天兩個部份，上機測試的題目要求是用Python做auto cherry-pick，題目會給兩個git server的幾組change，你需要寫一個Python程式把這些change當成參數，利用Gerrit query取得change中對應的project name和reference，之後在parse一個xml檔得到project的pathname，最終才能完成cherry-pick，我最後卡在剖析JSON資料的部份，整體完成度大約50%。</p><p>聊天的部份有問到我面對一個難解問題時的處理態度及方法，及履歷上一些他們有興趣的問題，我履歷上有提到用過firebug和profiling tools做debug和效能分析的經驗，就有被問到用firebug除錯時，會深入到比javascript更低階的執行環境嗎？有沒有利用Python做過任何應用之類的，並提到說這個職缺需要實作一個內部使用，基於git的tool，要在六個月的時間中獨立完成，其實和我想像中的intern有不小的落差。</p><h2 id="Skymizer-軟體工程實習生"><a href="#Skymizer-軟體工程實習生" class="headerlink" title="Skymizer - 軟體工程實習生"></a>Skymizer - 軟體工程實習生</h2><p>Skymizer是這次找intern的主要動力與目標，會知道這間公司也是jserv老師常在課堂及臉書上數次提到該公司的強大，公司成員多來自一流大學且在如google，聯發科技等著名公司服務過，公司主要的產品是編譯器，透過獨家技術能讓顧客的程式效能提昇30%以上。</p><ul><li><a href="https://www.youtube.com/watch?v=cuFK7Onfqig" target="_blank" rel="noopener">公司介紹影片</a></li><li><a href="https://www.youtube.com/watch?v=CDOTMOUXqR4" target="_blank" rel="noopener">創辦人 Luba 在coscup 2011發表淺談 GCC 編譯技術 - Break Compilation Boundaries with GCC</a></li><li><a href="https://archive.org/details/COSCUP2012ARMvisorARMRMPeterChang" target="_blank" rel="noopener">創辦人之一 Peter chang在coscup 2012發表ARMvisor - ARM架構上系統虛擬機的實作 </a></li></ul><h3 id="履歷撰寫"><a href="#履歷撰寫" class="headerlink" title="履歷撰寫"></a>履歷撰寫</h3><p>為了這次面試我在一個禮拜內努力拼出英文履歷，並用<a href="https://github.com/posquit0/Awesome-CV" target="_blank" rel="noopener">Awesome-cv</a>和<a href="https://www.latex-project.org/" target="_blank" rel="noopener">latex</a>排出較為清晰的履歷版型，在這之前我沒用過latex，中文履歷也是用104的制式格式，履歷內容的產出很大一部份歸功於jserv老師，老師教我如何蒐集公司資料，分析自己的優勢與劣勢，最重要的是如何把自己做過得事情和經驗，透過履歷與職務產生連結，在這次面試過程中，我的履歷也得到面試官的肯定，其中一位提到他們通常會在十秒內掃過一份履歷並決定是否給其面試機會。</p><p><strong><a href="https://dl.dropboxusercontent.com/u/31201582/resume.pdf" target="_blank" rel="noopener">我的英文履歷</a></strong></p><p>在撰寫履歷期間，我參考過不少網路資料，並簡短紀錄成幾篇文章，有興趣的可以參考:</p><ol><li><a href="http://good5dog5.github.io/2016/03/23/Write_resume_using_Latex/">用Latex寫個人履歷 - 以Awesome-cv作為template</a></li><li><a href="http://good5dog5.github.io/2016/03/30/resume-note/">寫英文履歷時的筆記</a></li></ol><h3 id="面試過程"><a href="#面試過程" class="headerlink" title="面試過程"></a>面試過程</h3><p>面試當天總共有四位面試官，他們首先簡短的自我介紹後，換我被要求用我的履歷做自我介紹，我原本就有準備自我介紹，但跟我履歷上的順序是不一致的，這會讓面試官無法對照履歷獲得一個有系統的認知，建議準備自我介紹的時候可以按照履歷的排列順序會比較好。結束自我介紹後，面試官針對履歷上他們有興趣的項目做進一步的細問，我被問到 </p><ul><li>你用過perf和gprof，那他們有何不同的地方嗎？</li><li>你覺得perf的結果準確嗎？ 還有perf之所以能偵測程式熱點的機制是？</li><li>你如何用perf知道程式的cache misses rate有降低，指令是如何下的？</li><li>你說你用過gnu toolchain，那除了make和gcc，還有哪些utility是你有用過得？</li><li>你有撰寫過ld script的經驗嗎？</li><li>請問git rebase是什麼?</li></ul><p>專題相關問題</p><ul><li>簡述畢業專題負責的部份</li><li>五子棋AI的部份是到怎樣的程度</li><li>有用C++做過什麼專案嗎？Python呢？</li></ul><p>之後面試官給出了三個選擇，要上白板寫解法，一開始我用dp寫了第一個版本，被要求能否在更快呢？我把dp用來存資料的table修改為幾個variable，如此省掉array初始化的空間及array存取的overhead，因為forloop中有用到i++，就被問到說<code>i++</code>和<code>++i</code>的效能差異，並寫兩個function去實作<code>i++</code>和<code>++i</code>的差異，這裡我大概就卡了二十分鐘，之後回到原本的題目，被要求O(1)的解法，最後實在做不出來，面試官給出解題方向，例如可以在compile time先建制好table，並把table entry塞在GPU或CPU register中，即可在run time時以O(1)得解。</p><p>被問到的問題其實沒有很多，白板題的部份花掉太多時間，使得我有準備一些如<a href="http://www.books.com.tw/products/0010456858" target="_blank" rel="noopener">程式設計師的自我修養</a>中提到的知識沒機會被問到，另外，履歷中所有列出的陳述，都應該先思考被問到相關問題時該如何回答，使得在固定的面試時間內，能讓自己有更多表現的機會。 </p><h2 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h2><p>Skymizer在面試過後的幾天(5/27)來信，告知沒被錄取的結果，與一般罐頭感謝信不同的是，裡頭描述了我面試過程的表現與建議，讓得知結果後的心情除了沮喪，也有溫暖再出發的心情 </p><blockquote><p>謝謝您申請 Skymizer 的見習勇者，我們有感受到您對此職位的熱情與積極。<br>你使用 gprof 和 perf 的經驗是我們所重視的，在面試的過程中，我們也發現你會主動針對自己不足的部份尋求成長的空間，不斷進取的態度讓人印象深刻，你也有找到對應文件自行判讀的能力。</p><p>很遺憾的通知您此次沒有機會與您合作，但我們看得出來你有很大的潛力，也非常期待你未來的發展。一點個人的小建議，你的能力很優秀，在面試的時候對於題目可以更主動一點提問，可以讓你更加亮眼喔！</p><p>我們會在 blog 或粉絲團上分享我們對於產業、技術的想法，歡迎你繼續跟我們交流想法，也誠摯邀請你下次再前來挑戰！</p></blockquote><p>感動之餘我寫了人生第一封落榜感謝信XD</p><blockquote><p> Dear Little Sky,</p><p>感謝Skymizer給了我面試機會，讓我有機會重新檢視自己並追求卓越。</p><p>撰寫履歷的過程是有趣且充滿挑戰的，我從各方面蒐集Skymizer的相關資訊，包括Luba和Peter在COSCUP的演講，<br>看完後除了敬佩更增添我想在Skymizer工作的念頭，再寄出履歷後過了好久才等到回音，能得到你們的面試邀請真的很令我開心。</p><p>謝謝你們在面試時點出的問題，包括履歷的錯字，自我介紹的順序等等，你們對於程式執行效率的執著令我印象深刻，我會用這樣的態度去面對我以後撰寫的每個專案，<br>希望未來能夠通過你們的挑戰。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其實我沒有認真思考過為何要找暑期實習這件事，只是看到強者們都會努力去爭取這些機會，故利用進Lab前的空檔寫好英文履歷，有幸得到Skymizer和Nvidia的面試邀請，趁著記憶還鮮明時，把過程中的感受及心得記錄下來。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Job" scheme="http://jordanhuang.tw/tags/Job/"/>
    
      <category term="Interview" scheme="http://jordanhuang.tw/tags/Interview/"/>
    
      <category term="Skymizer" scheme="http://jordanhuang.tw/tags/Skymizer/"/>
    
      <category term="Nvidia" scheme="http://jordanhuang.tw/tags/Nvidia/"/>
    
  </entry>
  
</feed>
